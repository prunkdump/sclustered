#!/usr/bin/perl -w
# vim:et:ts=2:sw=2:

# $Id$
#*********************************************************************
#
# fai-monitor -- monitor daemon which collects client status info
#
# This script is part of FAI (Fully Automatic Installation)
# (c) 2003-2012 by Thomas Lange, lange@informatik.uni-koeln.de
# Universitaet zu Koeln
#
#*********************************************************************

use strict;
use Socket;
use Getopt::Std;
use POSIX;

$| = 1;
my ($port, $timeout, $daemon, $timestamp);

# run directory #
my $faiRunDir = '/var/run/fai-monitor-joind'; 
my $pidfile = 'fai-monitor-joind.pid';

# send log to fifo for fai-monitor-gui #
my $fifoFile = 'fai-monitor-joind.fifo';
my $fifoHdl;

# and keep a copy as plain text file #
my $logFile = '/var/log/fai-monitor-joind.log';

# save the host waiting for join domain #
my $waitingHostDir = '/var/cache/fai-join';
my $waitingHostFile = 'fai-waiting-hosts';

# use ip for fai-chboot #
my $useip;

our ($opt_b,$opt_h,$opt_p,$opt_l,$opt_t,$opt_d,$opt_P,$opt_T,$opt_i);
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
sub logline(@) {
  # write to log file #
  open(LOGFILE, ">> $logFile") or return 0;
  print LOGFILE (scalar localtime(), ' - ') if ($timestamp);
  print LOGFILE @_ or return 0;
  close(LOGFILE);

  # write to fifo for fai-monitor-gui #
  syswrite($fifoHdl, scalar localtime().' - ') if ($timestamp);
  foreach my $val (@_) {
     syswrite($fifoHdl, "$val ");
  }

  # done # 
  return 1;
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
sub saveWaitingHost {
   my ($hostIp) = @_;
   
   my @result;

   # try to get the hostname #
   my $hostName;
   open(CMD, "ssh $hostIp -oBatchMode=yes -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no \"hostname\"|") or die "cannot execute command : $!";
   @result = <CMD>;
   close(CMD);

   # check for errors #
   if( $? != 0 ){
      print "Can't connect to host $hostIp !\n";
      return 1;
   } else {
      $hostName = $result[0];
      chomp($hostName);
      $hostName =~ s/\..*//;
   }

   # try to get host ssh fingerprint #
   my $sshFingerprint;
   open(CMD, "ssh $hostIp -oBatchMode=yes -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no \"ssh-keygen -lf /etc/ssh/ssh_host_rsa_key.pub\"|") or die "cannot execute command : $!";
   @result = <CMD>; 
   close(CMD);

   # check for errors #
   if( $? != 0 ){
      print "Can't connect to host $hostName !\n";
      return 1;
   } else {
      my @hostPubKey = split(' ', $result[0]);
      $sshFingerprint = $hostPubKey[1];
   }

   # try to get host mac address #
   my $macAddress;
   open(CMD, "ssh $hostIp -oBatchMode=yes -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no \"cat /sys/class/net/eth0/address\"|") or die "cannot execute command : $!";
   @result = <CMD>;
   close(CMD);

   # check for errors #
   if( $? != 0 ){
      print "Can't connect to host $hostName !\n";
      return 1;
   } else {
      $macAddress = $result[0];
      chomp($macAddress);
   }

   ###################
   # save the result #
   ###################

   # check if the host is already there #
   open(WAITINGFILE, "+<$waitingHostDir/$waitingHostFile") or return 0;
   my $hostLine;
   while( defined($hostLine = <WAITINGFILE>) ){
      # get mac address #
      chomp($hostLine);
      my @lineHostData = split(' ', $hostLine);
      my $lineHostMacAddress = $lineHostData[3];

      #check mac address #
      if ( $lineHostMacAddress eq $macAddress ) {
         last;
      }
   }

   # update the file #
   if ( defined($hostLine) ){
      my $returnPos = tell(WAITINGFILE) - length("$hostLine\n");
      my @lastLines = <WAITINGFILE>;
      seek(WAITINGFILE, $returnPos, SEEK_SET);
      print WAITINGFILE @lastLines;
      truncate(WAITINGFILE, tell(WAITINGFILE));
   }
   print WAITINGFILE "$hostIp $hostName $sshFingerprint $macAddress\n" or return 0;
   close(WAITINGFILE);
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
sub signal_die(@) {
  logline(@_);
  unlink($faiRunDir/$pidfile);
  exit(1);
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
sub signal_warn(@) {
  logline(@_) or die "log: $!";
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
sub signal_deadly(@) {
  # Use the die-handler
  signal_die('Caught deadly signal ' . shift() . "\n");
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
sub server_init() {
  # check run dir #
  if( ! -d "$faiRunDir") {
     mkdir("$faiRunDir", 755);
  }

  # check fifo #
  if( ! -e "$faiRunDir/$fifoFile" ) {
     if( ! mkfifo("$faiRunDir/$fifoFile", "0600") ) {
        print("Cannot create fifo $fifoFile \n");
        exit(1);
     }
  }

  sysopen($fifoHdl, "$faiRunDir/$fifoFile", O_NONBLOCK|O_RDWR) or die "sysopen $fifoFile: $!";

  # check cache dir #
  if( ! -d "$waitingHostDir") {
     mkdir("$waitingHostDir", 755);
  }

  if( ! -e "$waitingHostDir/$waitingHostFile" ) {
     open(WAITINGFILE, ">>$waitingHostDir/$waitingHostFile");
     close(WAITINGFILE);
  }

  # start #
  logline("FAI monitoring daemon starting..\n") or die "log: $!";

  # Init signals
  $SIG{INT} = \&signal_deadly;
  $SIG{QUIT} = \&signal_deadly;
  $SIG{TERM} = \&signal_deadly;
  $SIG{__DIE__} = \&signal_die;
  $SIG{__WARN__} = \&signal_warn;
  # HUP is usually used to reopen log files. This is not a problem
  # in this design.
  $SIG{HUP} = 'IGNORE';

  if ($daemon) {
    if (-e "$faiRunDir/$pidfile") {
    # Pid file already exists. Check if it's a valid pid.
      open(PIDFILE, '<', "$faiRunDir/$pidfile") or die "open $faiRunDir/$pidfile: $!";
      my $pid = <PIDFILE>;
      chomp($pid);
      if ($pid ne '') {
      # Kill -0 exits with value 0 if pid is alive
        system("kill -0 $pid 2> /dev/null");
        if ($? == 0) {
          logline("Pidfile $pidfile exists and contains an existing pid. Exiting.\n");
          exit(1);
        }
      }
      close(PIDFILE);
    }
    eval "Proc::Daemon::Init";
    umask 022;

    open(PIDFILE, '>', "$faiRunDir/$pidfile") or die "open $faiRunDir/$pidfile: $!";
    print PIDFILE $$ or die "print $pidfile: $!";
    close(PIDFILE);
  }

  # Listen
  my $proto = getprotobyname('tcp');
  socket(SERVER, PF_INET, SOCK_STREAM, $proto) or die "socket: $!";
  setsockopt(SERVER, SOL_SOCKET, SO_REUSEADDR, 1) or die "setsockopt: $!";

  my $paddr = sockaddr_in($port, INADDR_ANY);

  bind(SERVER, $paddr) or die "bind: $!";
  listen(SERVER, SOMAXCONN) or die "listen: $!";
  logline("FAI monitoring daemon started on port $port with pid $$\n") or die "log: $!";
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
sub big_loop() {

  # accept a connection, print message received and close
  my ($client_addr);
  while ($client_addr = accept(CLIENT, SERVER)) {
    my ($port, $iaddr) = sockaddr_in($client_addr);
    my $ip = inet_ntoa($iaddr);

    my $inp = '';

    eval {
      local $SIG{__DIE__};
      local $SIG{__WARN__};
      local $SIG{'ALRM'} = sub { die("Timeout"); };

      alarm($timeout);
      $inp = <CLIENT>;
      alarm(0);
    };

    close CLIENT;

    if (!defined($inp) || $inp eq '') {
      # Client did not send anything, or alarm went off
      logline("$ip:$port: No data or timeout.\n") or die "log: $!";
      next;
    }

    # check if the install is finished #
    # and the client waiting to reboot #
    if ($inp =~ /^([^\s;]+)\s+TASKBEGIN faiend/) {
       saveWaitingHost($ip);
    }
 
    # check for fai-chboot #
    if ($inp =~ /^([^\s;]+)\s+TASKEND install 0/ && $opt_b) {
      my $cname = $1;
      if ($useip) {
        $cname = $ip;
      }
      system('fai-chboot', '-d', $cname);
      logline("$ip:$port: Disabling pxelinux configuration for $cname\n") or die "log: $!";
    }
    logline("$inp") or die "log: $!";
  }
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
sub usage {

  print << "EOF";
fai-monitor-joind, FAI monitor join daemon.

    Copyright (C) 2003-2012 by Thomas Lange

Usage: fai-monitor-joind [OPTIONS]

    -b                  Call fai-chboot to change boot parameter.
    -p PORT             Set port to listen to. Default is 4711.
    -t TIMEOUT          Timeout for bad clients. 0 to disable.
    -P FILE             PID-file. Default is '$pidfile'.
                        Used only if starting in daemon mode.
    -T                  Print timestamps in the log.
    -i                  When using -b: send IP of client to fai-choot
                        instead of the hostname the host reports.

EOF
  exit 0;
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

getopts('bhTp:l:t:dP:i') || usage;
$opt_h && usage;
$port = $opt_p || 4711;
$timeout = $opt_t || 5;
$daemon = 1;
$timestamp = $opt_T || 0;
$useip = $opt_i || 0;

if (defined($opt_P)) {
  $pidfile = $opt_P;
}

(eval "require Proc::Daemon") or
    die "Daemon mode not available, Proc::Daemon not found. Please install libproc-daemon-perl\n";
# If in daemon mode, use standard daemon log file

server_init;
big_loop;
