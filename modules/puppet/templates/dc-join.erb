#! /bin/bash
function ask_yes_or_no() {
   read -p "$1 ([y]es or [N]o): "
   case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
      y|yes) echo "yes" ;;
      *)     echo "no" ;;
   esac
}

function puppetizeHost() {

   # check if the certificate is already requested #
   # we must sign before clean #
   if puppet cert list | grep $hostFqdn; then
      puppet cert sign $hostFqdn
   fi

   # clean cert if needed #
   if puppet cert list --all | grep $hostFqdn; then
      puppet cert clean $hostFqdn
   fi

   # generate puppert cert #
   puppet cert generate --dns_alt_names "'$masterdns,$masterdns.$domain'" $hostFqdn

   #create client cert directories #
   ssh $hostip "mkdir -p /var/lib/puppet/ssl/certs"
   ssh $hostip "mkdir -p /var/lib/puppet/ssl/private_keys"

   # copy the certificates #
   scp /var/lib/puppet/ssl/certs/ca.pem $hostip:/var/lib/puppet/ssl/certs/ca.pem
   scp /var/lib/puppet/ssl/certs/$hostFqdn.pem $hostip:/var/lib/puppet/ssl/certs/$hostFqdn.pem
   scp /var/lib/puppet/ssl/private_keys/$hostFqdn.pem $hostip:/var/lib/puppet/ssl/private_keys/$hostFqdn.pem
}


#######################
#       joinning      #
#######################

# one arg, the host #
if [ $# != 1 ]; then
    echo "Give the host to join !"
    exit 0
fi
target="$1"


################
# check target #
################

# check ssh connection #
ssh $target -oBatchMode=yes 'echo hello'
if [ "$?" -ne "0" ]; then
   echo 'Cannot access to the target host !'
   echo 'Please set a passwordless ssh connection with ssh-copy-id.'
   exit 0
fi


# get the host params #
hostname=$(ssh $target -oBatchMode=yes 'hostname')
targetDomain=$(ssh $target -oBatchMode=yes 'hostname --domain')


# check DNS #
dnsSet='false'
targetNameServer=$(ssh $target -oBatchMode=yes 'cat /etc/resolv.conf')
hostname -I | while read -r interfaceIP; do
   if echo "$targetNameServer" | grep -q "nameserver[[:space:]]*${interfaceIP}"; then
      dnsSet='true'
      break
   fi
done

if [ "$dnsSet" != 'true' ]; then
   echo "The target host DNS is not set to this DC !"
   echo "Please check /etc/network/interfaces and /etc/resolv.conf"
   echo "and ensure the DNS is set to to this DC's IP".
   exit 0
fi


# check if the target is an IP otherwise resolve #
if echo "$target" | grep -q '^[[digit]]?\.[[digit]]?\.[[digit]]?\.[[digit]]?$'; then
   hostip="$target"
else
   hostip=$(host $target | rev | cut -d' ' -f 1 | rev)
fi


# check samba and puppet #
if ! ssh $target -oBatchMode=yes 'dpkg -s samba >/dev/null 2>&1'; then
   echo "Samba is not installed on the target host !"
   echo "Please install the samba package"
   exit 0
fi

if ! ssh $target -oBatchMode=yes 'dpkg -s puppet >/dev/null 2>&1'; then
   echo "Puppet is not installed on the target host !"
   echo "Please install the puppet package"
   exit 0
fi


# check domain #
domain='<%= @samba_domain %>'
if [ "$targetDomain" != "$domain" ); then
   echo "The target host does not have the correct domain :
   echo "$domain"
   echo 'Check /etc/network/interfaces, /etc/resolv.conf and /etc/hosts'
   echo 'and correct all domain names'
   exit 0
fi
hostFqdn="$hostname.$domain"


# check puppet hiera interfaces #
targetInterfaces=$(puppet lookup samba::interfaces --node $hostFqdn | sed '/^\s*-\s*lo\s*$/d' | grep '^[[:space:]]*-[[:space:]]')
if [ "$?" -ne "0" ] || [ -z "$targetInterfaces" ]; then
   echo "No hiera Samba interfaces configuration file for the target host !"
   echo "Please create a file /etc/puppet/hieradata/hostname/$hostname.yaml"
   echo "containing the interfaces that will be used."
   echo " "
   echo "Exemple :"
   echo "---"
   echo "samba::interfaces:"
   echo "   - lo"
   echo "   - enp1s0"
   echo " "
   exit 0
fi


# check node #
currentNode=''
targetIsDC='false'
targetIsAccountServer='false'

while read -r nodeLine; do

   if echo "$nodeLine" | grep -q '^[[:space:]]*node[[:space:]]'; then
      currentNode=$(echo "$nodeLine" | sed "s/^[[:space:]]*node[[:space:]]*'\(.*\)'.*$/\1/")
   fi

   if echo "$nodeLine" | grep -q 'samba::pdc'; then
      if [ "$currentNode" == "$hostFqdn" ]; then
         targetIsDC='true'
      fi
   fi

   if echo "$nodeLine" | grep -q 'account_server[[:space:]]*=>[[:space:]]*true'; then
      if [ "$currentNode" == "$hostFqdn" ]; then
         targetIsAccountServer='true'
      fi
   fi
done < /etc/puppet/environments/production/manifests/nodes.pp

if [ "$targetIsDC" != 'true' ]; then
   echo "The host $hostFqdn is not configured as DC in puppet."
   echo "Check /etc/puppet/environments/production/manifests/nodes.pp"
   echo "For a node definition with the samba::pdc class"
   exit 0
exit 0


#####################################
# check partition if account server #
#####################################
displayPartitionWarning='false'

if [ "$targetIsAccountServer" == 'true' ]; then

   # get locations #
   targetHomeLocation=$(puppet lookup samba::home_path --node $hostFqdn | sed 's/^--- "\(.*\)".*$/\1/')
   targetHomeLocationRoot=$(echo "$targetHomeLocation" | cut -d/ -f2)
   targetShareLocation=$(puppet lookup samba::share_path --node $hostFqdn | sed 's/^--- "\(.*\)".*$/\1/')
   targetShareLocationRoot=$(echo "$targetShareLocation" | cut -d/ -f2)
   targetProfileLocation=$(puppet lookup samba::profile_path --node $hostFqdn | sed 's/^--- "\(.*\)".*$/\1/')
   targetProfileLocationRoot=$(echo "$targetProfileLocation" | cut -d/ -f2)

   # check is mounted #
   if ! ssh $target -oBatchMode=yes 'mount' | grep -q "[[:space:]]/${targetHomeLocationRoot}"; then
      displayPartitionWarning='true'
   fi

   if ! ssh $target -oBatchMode=yes 'mount' | grep -q "[[:space:]]/${targetShareLocationRoot}"; then
      displayPartitionWarning='true'
   fi

   if ! ssh $target -oBatchMode=yes 'mount' | grep -q "[[:space:]]/${targetProfileLocationRoot}"; then
      displayPartitionWarning='true'
   fi
fi


##################
# display result #
##################

echo "Please check carefully the parameters of the new DC :"
echo "------------------------------"
echo "hostname: $hostname"
echo "domain: $targetDomain"
echo "ip: $hostip"
echo "interfaces:"
echo "$targetInterfaces"
if [ "$targetIsAccountServer" == "false" ]; then
   echo "This DC is not an account server"
else
   echo "This DC is an account server"
   echo "   Home path: $targetHomeLocation"
   echo "   Share path: $targetShareLocation"
   echo "   Profile path: $targetProfileLocation"
fi
echo "------------------------------"

continueRep=$(ask_yes_or_no "Continue ?")
if [ "$continueRep" == "no" ]; then
   exit 0
fi


###############
# join the DC #
###############

# get samba password #
read -s -p "Give Samba4 password : " SAMBAPASSWORD
echo

# check samba password #
echo "$SAMBAPASSWORD" | kinit administrator
if (($? != 0)); then
   echo "Bad samba password !"
   exit 0
fi

# get hostname #
realm='<%= @samba_realm %>'
reversezone='<%= @reverse_zone %>'
camasterdns='<%= @casrv_dns %>'
masterdns='<%= @mastersrv_dns %>'
hostname=$(ssh $hostip hostname)
hostnameU="$(echo $hostname | tr '[:lower:]' '[:upper:]')"
hostFqdn="$hostname.$domain"

# compute reverse ip #
ipa=$(echo $hostip | cut -d'.' -f1)
ipb=$(echo $hostip | cut -d'.' -f2)
ipc=$(echo $hostip | cut -d'.' -f3)
ipd=$(echo $hostip | cut -d'.' -f4)
reverseip="$ipd.$ipc.$ipb.$ipa.in-addr.arpa"

#################################
# get the interfaces from hiera #
#################################

# check the host file #
if [ ! -e "/etc/puppet/hieradata/hostname/${hostname}.yaml" ]; then
   echo "No host hiera configuration file !"
   echo "Please create a file /etc/puppet/hieradata/hostname/$hostname.yaml"
   echo "containing the interfaces that will be used."
   echo " "
   echo "Exemple :"
   echo "---"
   echo "samba::interfaces:"
   echo "   - lo"
   echo "   - enp1s0"
   echo " "
   exit 0
fi

# read the interfaces #
interfacesDataStarted=''
interfaces_flat=''

while read -r fileLine; do

  # check if we are reading interfaces #
  if [ "$interfacesDataStarted" == "true" ]; then

     # the line must start with - #
     if echo "$fileLine" | grep -q '^[[:space:]]*-'; then

        # add the interface #
        newInterface=$(echo "$fileLine" | sed 's/^\s*-\s*\(\S*\).*$/\1/')
        if [ ! -z "$newInterface" ]; then
           interfaces_flat="$interfaces_flat $newInterface"
        fi

     # else if the line is not empty this may be some other data #
     else
        if ! echo "$fileLine" | grep -q '^[[:space:]]*$'; then
           interfacesDataStarted=''
        fi
     fi

  # else search for the begin of interfaces data #
  else
     if echo "$fileLine" | grep -q 'samba::interfaces:'; then
        interfacesDataStarted='true'
     fi
  fi
done < "/etc/puppet/hieradata/hostname/${hostname}.yaml"

# trim and check #
interfaces_flat=$(echo "$interfaces_flat" | xargs)
if [ -z "$interfaces_flat" ]; then
   echo "No interfaces definition found in /etc/puppet/hieradata/hostname/${hostname}.yaml"
   echo "Please add something like this :"
   echo "---"
   echo "samba::interfaces:"
   echo "   - lo"
   echo "   - enp1s0"
   echo " "
   exit 0
fi

# start to join the host #
ssh $hostip "rm -f /etc/samba/smb.conf"
ssh $hostip "samba-tool domain join $domain DC --option=\"interfaces=$interfaces_flat\" --option=\"bind interfaces only = yes\" --option=\"idmap_ldb:use rfc2307 = yes\" --dns-backend=BIND9_DLZ -Uadministrator --password=$SAMBAPASSWORD"

# SAMBA BUG : bind-dns/dns.keytab is not created
# needed to force
ssh $hostip "samba_upgradedns --dns-backend=BIND9_DLZ"

# !! not needed anymore !! #
#samba-tool dns add localhost $domain $hostname A $hostip -Uadministrator --password=$SAMBAPASSWORD

# create A and PTR dsn entry #
samba-tool dns add localhost $reversezone $reverseip PTR $hostFqdn -Uadministrator --password=$SAMBAPASSWORD

# !! not neede anymore !! #
# get guid #
#while read -r line; do
#   if echo $line | grep $hostnameU; then
#      read -r line
#      objectguid=$(echo $line | cut -d' ' -f2)
#   fi
#done < <(ldbsearch -H /var/lib/samba/private/sam.ldb '(invocationId=*)' --cross-ncs objectguid)

# update guid dns #
#if [ -n "$objectguid" ]; then
#   samba-tool dns add localhost _msdcs.$domain $objectguid CNAME $hostFqdn -Uadministrator --password=$SAMBAPASSWORD
#fi

# copy idmap #
ssh $hostip "systemctl stop samba-ad-dc"
tdbbackup -s .bak /var/lib/samba/private/idmap.ldb
scp /var/lib/samba/private/idmap.ldb.bak $hostip:/var/lib/samba/private/idmap.ldb
#we do not restart samba, puppet will do it

# give puppet certificates #
puppetizeHost
ssh $hostip "sed -i 's/^\s*\[main\]\s*$/[main]\nca_server = $camasterdns/' $target/etc/puppet/puppet.conf"
ssh $hostip "sed -i 's/^\s*\[main\]\s*$/[main]\nserver = $masterdns/' $target/etc/puppet/puppet.conf"
