#!/bin/bash

# delay to wait device power on #
sleep 5

function ask_yes_or_no() {
   read -p "$1 ([y]es or [N]o): "
   case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
      y|yes) echo "yes" ;;
      *)     echo "no" ;;
   esac
}


get_serial_number () {

   #####################
   # get serial number #
   #####################
   local serialNumber=''
   hexEDID=''
   charEDID=''

   IFS=''
   while read -r line; do
      line=$(echo $line | cut '-d ' -f2-)
      hexPart=$(echo $line | sed 's/ >.*//')
      charPart=$(echo $line | sed 's/^.* >\(.*\)</\1/')
      hexEDID="${hexEDID}${hexPart}"
      charEDID="${charEDID}${charPart}"
   done < <(cat $1 | od -t x1z )
   unset IFS

   hexEDID=${hexEDID# }

   # backup #
   hexEDID_back=$hexEDID
   charEDID_back=$charEDID

   #-------------------------------------------#
   # try to find serial in monitor descriptors #
   #-------------------------------------------#

   # 3 * 54 characters + 1 #
   hexEDID=$(echo "$hexEDID" | cut -c 163-)
   # 54 characters + 1 #
   charEDID=$(echo "$charEDID" | cut -c 55-)


   while [ ! -z "$hexEDID" ]; do
      if $(echo "$hexEDID" | grep -q '^00 00 .. ff'); then
         break
      else
         # 3*18 characters + 1 #
         hexEDID=$(echo "$hexEDID" | cut -c 55-)
         # 1 charecters + 1 #
         charEDID=$(echo "$charEDID" | cut -c 19-)
      fi
   done


   if [ ! -z "$charEDID" ]; then
      hexEDID=$(echo "$hexEDID" | cut -c 16-)
      charEDID=$(echo "$charEDID" | cut -c 6-)
   fi


   serialNumber=''

   while read -r -n3 currHex; do
      currHex=${currHex% }
      if [[ "0x${currHex}" -ge "0x20" ]]; then
         serialNumber="${serialNumber}${charEDID:0:1}"
      else
         break
      fi
      charEDID=$(echo "$charEDID" | cut -c 2-)
   done < <(echo -n "$hexEDID")


   #--------------------------------#
   # else get the raw serial number #
   #--------------------------------#
   if [ -z "$serialNumber" ]; then
      serialNumber=""
      for hexDigit in ${hexEDID_back:36:12}; do
         serialNumber="${hexDigit}${serialNumber}"
      done
      serialNumber="0x${serialNumber}"
   fi

   echo "$serialNumber"
}


get_vendor () {

   local vendor=$(cat $1 | parse-edid 2>&1 | grep 'VendorName ' )
   if echo "$vendor" | grep -q 'VendorName '; then
      echo "$vendor" | sed 's/^.*VendorName "\(.*\)".*$/\1/'
   else
      echo ""
   fi
}


get_product () {

   local product=$(cat $1 | parse-edid 2>&1 | grep 'ModelName ' )
   if echo "$product" | grep -q 'ModelName '; then
      echo "$product" | sed 's/^.*ModelName "\(.*\)".*$/\1/'
   else
      echo ""
   fi
}


get_binary_product () {

   local binProduct=$(cat $1 | od -t x1 --skip-bytes=10 --read-bytes=2 | head -n 1)
   local mainID=$(echo "$binProduct" | cut '-d ' -f3)
   local subID=$(echo "$binProduct" | cut '-d ' -f2)
   echo "0x${mainID}${subID}"
}


exit_with_error () {

   # ensure config file is absent #
   # so the script will be called again later #
   rm -f /var/lib/gdm3/.config/monitors.xml

   # create an empty logon script #
   echo '#!/bin/bash

' > /var/lib/gdm3/.config/monitors.xml.sh
   chmod 755 /var/lib/gdm3/.config/monitors.xml.sh

   # exit #
   exit 0
}

go_out () {
   chmod 755 /var/lib/gdm3/.config/monitors.xml.sh
   exit 0
}


add_screen_config () {

   # the target file must be present #
   if [ ! -e "$1" ]; then
      return
   fi

   # if $3 is given, do it in reverse order #
   if [ -z "$3" ]; then
      confLines=$(echo -e "$2")
   else
      confLines=$(echo -e "$2" | tac)
   fi

   # configuration header #
echo '  <configuration>
    <logicalmonitor>
      <x>0</x>
      <y>0</y>
      <scale>1</scale>
      <primary>yes</primary>' >> "$1"

   # creates outputs #
   IFS=''
   while read -r line; do
       outputName=$(echo "$line" | cut -d, -f1)
       vendor=$(echo "$line" | cut -d, -f2)
       product=$(echo "$line" | cut -d, -f3)
       serialNumber=$(echo "$line" | cut -d, -f4)
       rate=$(echo "$line" | cut -d, -f5)
       if [ ! -z "$outputName" ] && [ ! -z "$vendor" ] && [ ! -z "$product" ] && [ ! -z "$serialNumber" ] && [ ! -z "$rate" ]; then
          xrandrCommand="${xrandrCommand} --output ${outputName} --pos 0x0 --mode ${screenWidth}x${screenHeight} "
          echo "      <monitor>
        <monitorspec>
          <connector>${outputName}</connector>
          <vendor>${vendor}</vendor>
          <product>${product}</product>
          <serial>${serialNumber}</serial>
        </monitorspec>
        <mode>
          <width>${screenWidth}</width>
          <height>${screenHeight}</height>
          <rate>${rate}</rate>
        </mode>
      </monitor>" >> "$1"
      fi
   done <<< "$confLines"
   unset IFS

   # configuration footer #
   echo '    </logicalmonitor>
  </configuration>' >> "$1"
}



##########################################################

#########
# clean #
#########
rm -f /var/lib/gdm3/.config/monitors.xml
rm -f /var/lib/gdm3/.config/monitors.xml.sh
mkdir -p /var/lib/gdm3/.config
mkdir -p /usr/lib/firmware/edid

###########
# get def #
###########
if [ ! -e /var/lib/gdm3/.config/monitors.xml.def ]; then
   exit_with_error
fi

###############
# check force #
###############
if [ "$1" == "-f" ]; then
   forceEdid="true"
fi

###############
# read config #
###############
defLine=$(head -n 1 /var/lib/gdm3/.config/monitors.xml.def)
screenWidth=$(echo "$defLine" | cut '-dx' -f1)
screenHeight=$(echo "$defLine" | cut '-dx' -f2)
if [ -z "$screenWidth" ] || [ -z "$screenWidth" ]; then
   exit_with_error
fi


################################
# search for connected screens #
################################
connectedScreens=''
connectedScreensCount='0'
kernelEdidParams=''

while read -r line; do
   stateFile="${line}/status"
   edidFile="${line}/edid"
   screenState=$(cat $stateFile)

   unset outputName
   unset vendor
   unset product
   unset serialNumber

   # check if the screen is connected #
   if [ "$screenState" == "connected" ]; then

      # compute output name #
      fullOutputName=$(basename ${line})
      kernelOutputName=$(echo "$fullOutputName" | sed 's/^card.-//')
      outputName=$(echo "$kernelOutputName" | sed 's/HDMI-.-\(.\)/HDMI-\1/')
      edidFirmwareFileName="${outputName,,}.bin"

      # check if we can get info from edid #
      if [ -e "$edidFile" ]; then
         rawEdit=$(cat $edidFile | od)
         if [ "$rawEdit" != "0000000" ]; then

            # get parameters #
            vendor=$(get_vendor $edidFile)
            product=$(get_product $edidFile)
            if [ -z "$product" ]; then
               product=$(get_binary_product $edidFile)
            fi
            serialNumber=$(get_serial_number $edidFile)

            # if force Edid, copy firmware #
            if [ ! -z "$forceEdid" ]; then
               cp $edidFile /usr/lib/firmware/edid/$edidFirmwareFileName
               kernelEdidParams="${kernelEdidParams}${outputName}=${kernelOutputName}:edid/${edidFirmwareFileName}\n"
            fi
         fi
      fi

      # set unknown parameters #
      if [ -z "$vendor" ]; then
         vendor="unknown"
      fi
      if [ -z "$product" ]; then
         product="unknown"
      fi
      if [ -z "$serialNumber" ]; then
         serialNumber="unknown"
      fi

      # add result #
      if [ ! -z "$outputName" ]; then
         connectedScreens="${connectedScreens}$outputName,$vendor,$product,$serialNumber\n"
         connectedScreensCount=$((connectedScreensCount+1))
      fi
   fi
done < <(find /sys/class/drm | grep 'card.-')


####################################
# check we have at least 2 screens #
####################################
if [ "$connectedScreensCount" -lt "2" ]; then
   exit_with_error
fi


#################################
# get current active randR user #
#################################
currentDisplay='0'
currentUser='Debian-gdm'

while read -r connectedUser; do

   userSession=$(echo "$connectedUser" | tr -s ' ' | cut -d' ' -f2)

   # search for graphic session #
   if echo "$userSession" | grep -q '^:[0-9]$'; then

      # get user and display #
      userSessionName=$(echo "$connectedUser" | tr -s ' ' | cut -d' ' -f1)
      userSessionNumber=${userSession#:}

      # check if current #
      if [ "$userSessionNumber" -gt "$currentDisplay" ]; then
         currentDisplay="$userSessionNumber"
         currentUser="$userSessionName"
      fi
   fi
done < <(who)

currentUserUID=$(id -u "$currentUser")


####################
# get refresh rate #
####################

# read verbose randr output #
numTry="0"
getRandr="false"
while [ "$numTry" -ne "5" ] && [ "$getRandr" != "true" ]; do
   verboseRandr=$(env DISPLAY=":$currentDisplay" XAUTHORITY="/run/user/$currentUserUID/gdm/Xauthority" xrandr-verbose 2>/dev/null)
   if [ "$?" -eq "0" ]; then
      getRandr="true"
   else
      sleep 5
      numTry=$((numTry+1))
   fi
   IFS=''
   verboseRandr=$(echo -e $verboseRandr | sed 's/\(\*\|\+\)//g')
   unset IFS
done

if [ "$getRandr" != "true" ]; then
   exit_with_error
fi

# add refresh rate to list #
connectedScreensWithRate=''

IFS=''
while read -r line; do
   outputName=$(echo "$line" | cut -d, -f1)
   vendor=$(echo "$line" | cut -d, -f2)
   product=$(echo "$line" | cut -d, -f3)
   serialNumber=$(echo "$line" | cut -d, -f4)
   if [ ! -z "$outputName" ] && [ ! -z "$vendor" ] && [ ! -z "$product" ] && [ ! -z "$serialNumber" ]; then

      # search for freq #
      outputFound="false"
      while read -r randrLine; do
         if echo $randrLine | grep -q "^ "; then

            # mode line #
            if [ "$outputFound" == "true" ]; then
               if echo $randrLine | grep -q " *${screenWidth}x${screenHeight}"; then
                  modeFreq=$(echo $randrLine | tr -s ' ' | cut -d' ' -f3)
                  connectedScreensWithRate="${line},${modeFreq}\n${connectedScreensWithRate}"
                  break
               fi
            fi

         else

            # outpout line #
            if echo $randrLine | grep -q "^${outputName} "; then
               outputFound="true"
            else
               outputFound="false"
            fi
         fi
      done < <(echo -e $verboseRandr)
   fi
done < <(echo -e $connectedScreens)
unset IFS


# sort the list in same order than xrandr #
sortedOutputList=''
sortedKernelEdidParams=''
IFS=''
while read -r randrLine; do
   if echo $randrLine | grep -q "^.* connected "; then
      randrOutputName=$(echo $randrLine | cut -d' ' -f1)

      # get output line #
      fullOutputLine=$(echo -e $connectedScreensWithRate | grep "^${randrOutputName},")
      if [ "$?" -eq "0" ]; then
         if [ -z "$sortedOutputList" ]; then
            sortedOutputList="$fullOutputLine"
         else
            sortedOutputList="$sortedOutputList\n$fullOutputLine"
         fi
      fi

      # get kernel param #
      fullKernelEdidParams=$(echo -e $kernelEdidParams | grep "^${randrOutputName}=")
      fullKernelEdidParams=${fullKernelEdidParams#"${randrOutputName}="}
      if [ "$?" -eq "0" ]; then
         if [ -z "$sortedKernelEdidParams" ]; then
            sortedKernelEdidParams="drm.edid_firmware=${fullKernelEdidParams}"
         else
            sortedKernelEdidParams="${sortedKernelEdidParams},${fullKernelEdidParams}"
         fi
      fi
   fi
done < <(echo -e $verboseRandr)
unset IFS

connectedScreensWithRate="$sortedOutputList"
kernelEdidParams="$sortedKernelEdidParams"


##################
# display result #
##################

# print randr output with correct def in red #
echo "----------------------------"
echo "-   Randr current state    -"
echo "----------------------------"
randROutput=$(env DISPLAY=":$currentDisplay" XAUTHORITY="/run/user/$currentUserUID/gdm/Xauthority" xrandr 2>/dev/null)
randROutput=$(echo "$randROutput" | sed "s/   ${screenWidth}x${screenHeight}\(.*\)$/\\\\033\[0;31m   ${screenWidth}x${screenHeight}\1\\\\033[0m/")
echo -e "$randROutput"

#####################
# print the outputs #
#####################
echo "----------------------"
echo "-   Outputs found    -"
echo "----------------------"

IFS=''
while read -r line; do
   outputName=$(echo "$line" | cut -d, -f1)
   vendor=$(echo "$line" | cut -d, -f2)
   product=$(echo "$line" | cut -d, -f3)
   serialNumber=$(echo "$line" | cut -d, -f4)
echo "For output $outputName"
echo "   vendor: \"$vendor\""
echo "   product: \"$product\""
echo "   serial number: \"$serialNumber\""
done < <(echo -e $connectedScreensWithRate)
unset IFS


############################
# if force ask to continue #
############################
if [ ! -z "$forceEdid" ]; then
   if [ $(ask_yes_or_no "Are you sure you want to store this configuration permanently ?") == "no" ]; then
      exit 0
   fi
fi


#########################
# set kernel parameters #
#########################
if [ ! -z "$forceEdid" ]; then
   sed -i "s|^.*GRUB_CMDLINE_LINUX_DEFAULT.*$|GRUB_CMDLINE_LINUX_DEFAULT=\"quiet ${kernelEdidParams}\"|" /etc/default/grub
   update-grub
fi


#############################
# build configuration files #
#############################
if [ ! -z "$connectedScreensWithRate" ]; then

   # create script #
   echo '#!/bin/bash
if [ -e "/var/lib/gdm3/.config/monitors.xml.user" ]; then
   cp /var/lib/gdm3/.config/monitors.xml.user $HOME/.config/monitors.xml
fi
sleep 5
' > /var/lib/gdm3/.config/monitors.xml.sh

   xrandrCommand="xrandr "

   # echo header #
   echo '<monitors version="2">' > /var/lib/gdm3/.config/monitors.xml
   echo '<monitors version="2">' > /var/lib/gdm3/.config/monitors.xml.user

   #####################################
   # create xrandr order configuration #
   #####################################
   #screensConf=$(echo -e $connectedScreensWithRate)
   #add_screen_config "$screensConf"
   add_screen_config "/var/lib/gdm3/.config/monitors.xml" "$connectedScreensWithRate"
   add_screen_config "/var/lib/gdm3/.config/monitors.xml.user" "$connectedScreensWithRate"

   #############################################
   # create xrandr REVERSE order configuration #
   # only for gdm                              #
   #############################################
   #screensConf=$(echo -e $connectedScreensWithRate | tac)
   #add_screen_config "$screensConf"
   add_screen_config "/var/lib/gdm3/.config/monitors.xml" "$connectedScreensWithRate" -r

   #######
   # end #
   #######
   echo '</monitors>' >> /var/lib/gdm3/.config/monitors.xml
   echo '</monitors>' >> /var/lib/gdm3/.config/monitors.xml.user

   # create script #
   echo "$xrandrCommand" >> /var/lib/gdm3/.config/monitors.xml.sh
fi

######################
# execute now for :0 #
######################
if [ "$currentDisplay" -eq "0" ]; then
   env DISPLAY=':0' XAUTHORITY="/run/user/$currentUserUID/gdm/Xauthority" $xrandrCommand
fi

# done #
go_out
