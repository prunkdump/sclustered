#!/bin/bash

##############
#base var
##############
source /etc/samba/s4.conf

# usage #
function usage()
{
    binName=$(basename $0)
    echo "usage: $binName [-n] [-l] <share_name> <target_server>"
    echo "       $binName [-n] [-l] -c <shares_class> <target_server>"
    echo "       $binName [-n] -u"
    echo "   -n : non interractive"
    echo "   -l : migrate later"
    echo "   -u : update all pending migrations now"
    exit 0
}

waitingFile='/var/cache/accountserver/shares_waiting_migration.list'

###########
#parse args
###########
while [[ -n "$@" ]]; do

    # test option #
    OPTIND=1
    while getopts ":hnlcu" opt; do
	case $opt in
            n)
                optNoInterractive='true'
                ;;
            l)
                optLater='true'
                ;;
            c)
                optBaseClass='true'
                ;;
            u)
                optUpdatePending='true'
                ;;
	    h)
		usage
		;;
	    \?)
		echo "option -$OPTARG not recognized !"
		usage
		;;
	    :)
		echo "parameter of -$OPTARG not specified !"
		exit 0
		;;
	esac
    done

    # check classic args #
    if [ $OPTIND != 1 ]; then
       shift $((OPTIND-1))
    else
       remArgs="$remArgs $1"
       shift 1
    fi
done

# reset args #
if [ -n "$remArgs" ]; then
    set $remArgs
fi


function ask_yes_or_no() {
   read -p "$1 ([y]es or [N]o): "
   case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
      y|yes) echo "yes" ;;
      *)     echo "no" ;;
   esac
}


#################
# analyse args
#################

# need two args, or none when just update #
if [ "$optUpdatePending" != "true" ]; then
   if [ $# -ne 2 ]; then
      usage
   fi
else
   if [ $# -ne 0 ]; then
      usage
   fi
fi

# the -u switch can't be used with -l or -c #
if [ "$optUpdatePending" == "true" ]; then
   if [ "$optLater" == "true" ] || [ "$optBaseClass" == "true" ]; then
      usage
   fi
fi


########################
# server check library #
########################

# get hostname #
hostname=$(hostname)

# store checked servers #
# contain tab separated : #
# name local=true/false sharePath #
migrationServers=''

function checkServer() {

   serverName="$1"

   # ensure domain is removed #
   serverName=$(echo "$serverName" | cut -d. -f1)

   # check if the server is already checked #
   if echo "$migrationServers" | grep -q "^$serverName[[:space:]]"; then
      return
   fi

   # check if local #
   if [ "$serverName" == "$hostname" ]; then
      serverIsLocal='true'
      serverSharePath="$unixSharePath"
   else
      serverIsLocal='false'

      # check access to the server #
      ssh -n $serverName -oBatchMode=yes 'echo hello' > /dev/null
      if [ "$?" -ne "0" ]; then
         echo "Cannot access to the server $serverName !"
         echo "Please set a passwordless ssh connection with ssh-copy-id."
         exit 1
      fi

      # get directories #
      serverSharePath=$(ssh -n $serverName -oBatchMode=yes '. /etc/samba/s4.conf; echo $unixSharePath')
      if [ "$?" -ne "0" ] || [ -z "$serverSharePath" ]; then
         echo "Cannot find server $serverName share path !"
         exit 1
      fi

   fi

   # save #
   if [ ! -z "$migrationServers" ]; then
      migrationServers=$(echo -e "$migrationServers\n$serverName\t$serverIsLocal\t$serverSharePath")
   else
      migrationServers=$(echo -e "$serverName\t$serverIsLocal\t$serverSharePath")
   fi
}


###############################
# get target server and check #
###############################
if [ "$optUpdatePending" != "true" ]; then
   targetServer="$2"
   targetServer=$(echo "$targetServer" | cut -d. -f1)
   checkServer "$targetServer"
fi


#############################################
# check the shares that need to be migrated #
#############################################

# will contain tab separated : #
# dn cn sourceServer targetServer #
migrateShares=''

# BASE CLASS case #
# if base class is given get all shares inside #
if [ "$optBaseClass" == "true" ]; then

   baseClass="$1"

   # check the class #
   if ! baseClassInfo=$(s4classcheck $baseClass); then
      echo "The class $baseClass cannot be found !"
      exit 1
   else
      baseClassShareDN=$(echo "$baseClassInfo" | grep 'Class share DN: ')
      baseClassShareDN=${baseClassShareDN#Class share DN: }
   fi

   # get all the shares #
   migrateShares=$(s4ldbsearch $baseClassShareDN,$baseDN sub user '()' cn unixHomeDirectory)

   # check if we have shares #
   if [ -z "$migrateShares" ]; then
      echo "No shares in class $baseClass."
      exit 0
   fi

   # display the result #
   echo "---------------------------------------------------------"
   echo "The following shares will be migrated to $targetServer : "
   echo "---------------------------------------------------------"
   while read -r migrateShareInfo; do

      # get the share class #
      migrateShareClass=$(echo "$migrateShareInfo" | cut -f1)
      migrateShareClass=$(echo "$migrateShareClass" | cut -d ',' -f2)
      migrateShareClass=${migrateShareClass#OU=}

      # get the share name #
      migrateShareName=$(echo "$migrateShareInfo" | cut -f2)

      # display #
      echo "Share $migrateShareName from class $migrateShareClass"

   done <<< "$migrateShares"
   echo "--------------------------------------------------"

   # if needed ask to continue #
   if [ "$optNoInterractive" != "true" ]; then
      if [ $(ask_yes_or_no "Do you want to continue ?") == "no" ]; then
         exit 0
      fi
   fi

   # add target #
   migrateShares=$(echo "$migrateShares" | sed "s/$/\t$targetServer/")

# UPDATE case #
# if we need to update, load and check the share list "
elif [ "$optUpdatePending" == "true" ]; then

   # check if we have shares to update #
   pendingMigrationShareCount=$(grep -c -v '^ *$' $waitingFile)
   if [ "$pendingMigrationShareCount" -eq "0" ]; then
      echo "No pending share migration to update !"
      exit 0
   fi

   # read the file before updating the content in case of error #
   waitingShares=$(cat $waitingFile);

   # check every waiting share #
   while read pendingMigrationInfo; do

      # get share and target #
      pendingMigrationShare=$(echo "$pendingMigrationInfo" | cut -d ' ' -f1)
      pendingMigrationServer=$(echo "$pendingMigrationInfo" | cut -d ' ' -f2)

      # check share #
      if ! pendingMigrationShareInfo=$(s4ldbsearch $baseShareDN,$baseDN sub user "(cn=$pendingMigrationShare)" cn unixHomeDirectory); then

          # on error delete the share from the list #
          # may the share don't exist anymore #
          sed -i "/^\s*$pendingMigrationShare\s/d" "$waitingFile"

      else

         # check target server #
         checkServer "$pendingMigrationServer"

         # save share info with target #
         if [ ! -z "$migrateShares" ]; then
            migrateShares=$(echo -e "$migrateShares\n$pendingMigrationShareInfo\t$pendingMigrationServer")
         else
            migrateShares=$(echo -e "$pendingMigrationShareInfo\t$pendingMigrationServer")
         fi
      fi

   done <<< "$waitingShares"


# SINGLE SHARE case
# if no class is given just one share to migrate #
else

   migrateShareName="$1"

   # check if the share exist #
   if ! migrateShares=$(s4ldbsearch $baseShareDN,$baseDN sub user "(cn=$migrateShareName)" cn unixHomeDirectory); then
      echo "The share $migrateShareName does not exist !"
      exit 1
   fi

   # add the target server #
   migrateShares=$(echo -e "$migrateShares\t$targetServer")
fi


##############
# check time #
##############
if [ "$optNoInterractive" != "true" ] && [ "$optLater" != "true" ]; then

   # get current time #
   currentTime=$(date +%H%M | sed 's/^0*//');

   # check time #
   # warning between 5:00 and 21:00 #
   if [ "$currentTime" -gt "500" ] && [ "$currentTime" -lt "2100" ]; then
      echo "----------------------------------------------------------------"
      echo "WARNING : you are about to migrate shares !"
      echo "You need to be sure that the shares are not currently in use !"
      echo "You can use the -l option to migrate the shares later by cron job."
      echo "----------------------------------------------------------------"
      if [ $(ask_yes_or_no "Are you sure you want to continue ?") == "no" ]; then
         exit 0
      fi
   fi
fi


############################
# check all source servers #
############################
while read -r migrateShareInfo; do

   # get source server #
   shareDN=$(echo "$migrateShareInfo" | cut -f1)
   shareName=$(echo "$migrateShareInfo" | cut -f2)
   sourceServer=$(echo "$migrateShareInfo" | cut -f3)

   if [ -z "$shareDN" ] || [ -z "$sourceServer" ]; then
      echo "Cannot find share $shareName current server !"
      exit 1
   fi

   # check source server #
   checkServer "$sourceServer"

done <<< "$migrateShares";


#--------------------------#
#                          #
#        MIGRATE           #
#                          #
#--------------------------#


######################
# migrate all shares #
######################
while read -r migrateShareInfo; do

   # get share info #
   shareDN=$(echo "$migrateShareInfo" | cut -f1)
   shareName=$(echo "$migrateShareInfo" | cut -f2)
   sourceServer=$(echo "$migrateShareInfo" | cut -f3)
   targetServer=$(echo "$migrateShareInfo" | cut -f4)

   # check if we need to migrate #
   if [ "$targetServer" == "$sourceServer" ]; then
      echo "The share $shareName is already stored on $targetServer"

      # remove if pending #
      if waitingLine=$(grep "^ *$shareName \+" "$waitingFile"); then

         # get pending server #
         waitingServer=$(echo "$waitingLine" | cut -d ' ' -f2)

         # signal removing #
         echo "The share $shareName previously set to be migrated to $waitingServer."
         echo "This is now disabled and the share will stay on $targetServer."

         # remove #
         sed -i "/^\s*$shareName\s/d" "$waitingFile"
      fi

      # next share #
      continue
   fi

   # get source server info #
   sourceServerInfo=$(echo "$migrationServers" | grep "^$sourceServer[[:space:]]")
   if [ "$?" -ne "0" ]; then
      echo "Failed to get source server $sourceServer information !"
      exit 1
   fi

   sourceServerIsLocal=$(echo "$sourceServerInfo" | cut -f2)
   sourceServerSharePath=$(echo "$sourceServerInfo" | cut -f3)

   # sanitary check #
   if [ -z "$sourceServerIsLocal" ] || [ -z "$sourceServerSharePath" ]; then
      echo "Failed to get source server $sourceServer information !"
      exit 1
   fi


   # get target server info #
   targetServerInfo=$(echo "$migrationServers" | grep "^$targetServer[[:space:]]")
   if [ "$?" -ne "0" ]; then
      echo "Failed to get target server $targetServer information !"
      exit 1
   fi

   targetServerIsLocal=$(echo "$targetServerInfo" | cut -f2)
   targetServerSharePath=$(echo "$targetServerInfo" | cut -f3)

   # sanitary check #
   if [ -z "$targetServerIsLocal" ] || [ -z "$targetServerSharePath" ]; then
      echo "Failed to get target server $targetServer information !"
      exit 1
   fi


   #####################################
   # check if we need to do this later #
   #####################################
   if [ "$optLater" == "true" ]; then

      # ensure the operation is not already pending #
      if waitingLine=$(grep "^ *$shareName \+" "$waitingFile"); then

         # get pending server #
         waitingServer=$(echo "$waitingLine" | cut -d ' ' -f2)

         # check if the same #
         if [ "$waitingServer" == "$targetServer" ]; then
            echo "The share $shareName already waiting to be migrated to $targetServer."
            continue
         else
            echo "The share $shareName previously set to be migrated to $waitingServer."
            echo "Now it will be migrated to $targetServer."
            sed -i "/$waitingLine/d" "$waitingFile"
         fi
      fi

      # add to waiting list #
      echo "$shareName $targetServer" >> $waitingFile
      continue
   fi


   ####################
   # check if pending #
   ####################
   if waitingLine=$(grep "^ *$shareName \+" "$waitingFile"); then

      # get pending server #
      waitingServer=$(echo "$waitingLine" | cut -d ' ' -f2)

       # signal if server changed #
       if [ "$waitingServer" != "$targetServer" ]; then
          echo "The share $shareName previously waiting to be migrated to $waitingServer."
          echo "We are now migrating the share to $targetServer."
       fi
   fi


   #########################
   # rsync share to target #
   #########################
   shareDirectoryMigrated=''

   # check if directory exits #
   if [ "$sourceServerIsLocal" == 'true' ]; then
      test -e "$sourceServerSharePath/$shareName"
   else
      ssh -n $sourceServer -oBatchMode=yes "test -e $sourceServerSharePath/$shareName"
   fi

   # rsync directory if exist #
   if [ "$?" -eq "0" ]; then

      # build source #
      if [ "$sourceServerIsLocal" == 'true' ]; then
         rsyncSource="$sourceServerSharePath/$shareName"
      else
         rsyncSource="$sourceServer:/$sourceServerSharePath/$shareName"
      fi

      # build dest #
      if [ "$targetServerIsLocal" == 'true' ]; then
         rsyncDest="$targetServerSharePath/"
      else
         rsyncDest="$targetServer:/$targetServerSharePath/"
      fi

      # rsync #
      echo "Migrating $shareName directory to $targetServer..."
      rsync -XAaz --delete-after $rsyncSource $rsyncDest
      if [ "$?" -eq '0' ]; then
         echo "Share $shareName directory migrated to $targetServer."
         shareDirectoryMigrated='true'
      else
         echo "Error while migrating $shareName directory to $targetServer !"
         exit 1
      fi
   else
      echo "WARNING ! No share directory found while migrating $shareName from $sourceServer"
   fi


   ##################
   # update account #
   ##################

   echo "dn: $shareDN
changetype: modify
replace: unixHomeDirectory
unixHomeDirectory: ${targetServer}" > /tmp/$shareName

   ldbmodify --url=$samDatabase -b $baseDN /tmp/$shareName
   rm /tmp/$shareName

   if [ "$?" -eq '0' ]; then
      echo "Share $shareName migrated to $targetServer !"
   else
      echo "Error while updating share $shareName account !"
      exit 1
   fi


   ################
   # clean source #
   ################
   if [ "$shareDirectoryMigrated" == 'true' ]; then

      # remove source #
      if [ "$sourceServerIsLocal" == 'true' ]; then
         rm -rf "$sourceServerSharePath/$shareName"
      else
         ssh -n $sourceServer -oBatchMode=yes "rm -rf $sourceServerSharePath/$shareName"
      fi
   fi


   #######################
   # remove from pending #
   #######################
   sed -i "/^\s*$shareName\s/d" "$waitingFile"

   # done ! #
   # next share #

done <<< "$migrateShares";
