#!/bin/bash

##############
#base var
##############
source /etc/samba/s4.conf

# usage #
function usage()
{
    binName=$(basename $0)
    echo "usage: $binName <share_name> <[primary_access_class:]access_class1,access_class2, ...> [[mod,]acls] [-o owner] [-n show_name] [-s server]"
    exit 1
}


###########
#parse args
###########
while [[ -n "$@" ]]; do

    # test option #
    OPTIND=1
    while getopts ":ho:n:s:" opt; do
	case $opt in
	    o)
		shareOwner=$OPTARG
		;;
            n)
                shareShowName=$OPTARG
                ;;
            s)
                shareServer=$OPTARG
                ;;
	    h)
		usage
		;;
	    \?)
		echo "option -$OPTARG not recognized !"
		usage
		;;
	    :)
		echo "parameter of -$OPTARG not specified !"
		exit 1
		;;
	esac
    done

    # check classic args #
    if [ $OPTIND != 1 ]; then
       shift $((OPTIND-1))
    else
       remArgs="$remArgs $1"
       shift 1
    fi
done

# reset args #
if [ -n "$remArgs" ]; then
    set $remArgs
fi


#################
# analyse args
#################

#-------------------#
# check args number #
#-------------------#

# max three args #
if [ $# -gt 3 ] || [ $# -lt 2 ]; then
    usage
fi


#-----------------------------#
# check arg2 : access classes #
#-----------------------------#

# get share classes #
shareShowClasses="$2"

if echo "$shareShowClasses" | grep -q ':'; then
   primaryShareShowClass=$(echo "$shareShowClasses" | cut -d: -f1)
fi

# primary can be empty #
if [ ! -z "$primaryShareShowClass" ]; then
   shareShowClasses="${primaryShareShowClass},${shareShowClasses#${primaryShareShowClass}:}"
fi


# check all the classes      #
# and compute the base class #
IFS=','
for shareShowClass in $shareShowClasses; do

   if ! classInfo=$(s4classcheck $shareShowClass); then
      echo "Class $shareShowClass cannot be found !"
      exit 1
   fi

   classDN=$(echo "$classInfo" | grep 'Class DN: ')
   classDN=${classDN#Class DN: }
   classDN=$(echo "$classDN" | rev)
   if [ -z "$commonDN" ]; then
      commonDN="$classDN"
      firstShareClassInfo="$classInfo"
   else
      fieldPos="2"
      commonPart=$(echo "$commonDN" | cut -d, -f1) # the root is always common
      nextField=$(echo "$commonDN" | cut -d, -f2)
      while [ ! -z "$nextField" ] && echo "$classDN" | grep -q "^$commonPart,$nextField"; do
         fieldPos=$((fieldPos+1))
         commonPart="$commonPart,$nextField"
         nextField=$(echo "$commonDN" | cut -d, -f${fieldPos})
      done
      commonDN="$commonPart"
   fi
done
unset IFS
commonDN=$(echo "$commonDN" | rev)

# get base class, check and get info #
shareBaseClass=$(echo "$commonDN" | cut -d, -f1)
shareBaseClass=${shareBaseClass#OU=}
if ! shareBaseClassInfo=$(s4classcheck $shareBaseClass); then
   echo "Error : cannot found a correct common base class !"
   exit 1
fi

# choose the primary class #
if [ -z "$primaryShareShowClass" ]; then
   # no primary class, use the common base class #
   shareClassInfo="$shareBaseClassInfo"
else
   # use primary class, the first in the list #
   shareClassInfo="$firstShareClassInfo"
fi

shareClass=$(echo "$shareClassInfo" | grep 'Class Name: ')
shareClass=${shareClass#Class Name: }


#--------------------------#
# check arg1 : share name  #
#--------------------------#

# build the final share name : group.shareName #
shareClassGroup=$(echo "$shareClassInfo" | grep 'Class group: ')
shareClassGroup=${shareClassGroup#Class group: }
shareName="${shareClassGroup}.${1,,}"

# check if the share already exist #
if s4ldbsearch $baseShareDN,$baseDN sub user "(cn=$shareName)" > /dev/null; then
   echo "The share $shareName already exist !"
   exit 1
fi


#-----------------------------#
# check arg3 : mod,acls       #
#-----------------------------#
sharePermissions=$3
if [ -z "$sharePermissions" ]; then
   sharePermissions="0550"
else
   # check mod, if we don't have, add it #
   sharePermissionsMod=$(echo "$sharePermissions" | cut -d, -f1)
   if ! echo "$sharePermissionsMod" | grep -q -E '^[0-2]?[0-7][0-7][0-7]$'; then
      sharePermissions="0555,$sharePermissions"
   fi
fi


#------------------#
# check -o : owner #
#------------------#
shareBaseClassGroup=$(echo "$shareBaseClassInfo" | grep 'Class group: ')
shareBaseClassGroup=${shareBaseClassGroup#Class group: }

if [ -z "$shareOwner" ]; then
   shareOwner="root:${shareBaseClassGroup}"
fi

shareOwnerUser=$(echo $shareOwner | cut -d: -f1)
shareOwnerGroup=$(echo $shareOwner | cut -d: -f2)
if [ -z "$shareOwnerUser" ] || [ -z "$shareOwnerGroup" ]; then
   echo "Cannot parse owner : $shareOwner"
   exit 1
fi

# check owner user #
if [ "$shareOwnerUser" != "root" ]; then
   if ! s4ldbsearch $baseDN sub user "(cn=$shareOwnerUser)" > /dev/null; then
      echo "User $shareOwnerUser not found !"
      exit 1
   fi
fi

# check owner group #
if [ "$shareOwnerGroup" != "root" ]; then
   if ! s4ldbsearch $baseDN sub group "(cn=$shareOwnerGroup)" > /dev/null; then
      echo "Group $shareOwnerGroup not found !"
      exit 1
   fi
fi


#----------------------#
# check -n : show name #
#----------------------#
if [ -z "$shareShowName" ]; then
   shareShowName="$1"
fi

#-------------------#
# check -s : server #
#-------------------#
if [ -z "$shareServer" ]; then
   shareServer=$(hostname)
fi


###############################
# get user rfc2307 attributes #
###############################

# get the new uid #
userUid=$(s4ldbsearch CN=$shortDomain,CN=ypservers,CN=ypServ30,CN=RpcServices,CN=System,$baseDN base all '()' msSFU30MaxUidNumber | cut -f2)
if [ -z "$userUid" ]; then
   userUid="$baseUid"
fi

# get the gid #
shareClassGroupDN=$(echo "$shareClassInfo" | grep '^Class DN: ')
shareClassGroupDN=${shareClassGroupDN#Class DN: }
strgid=$(s4ldbsearch CN=$shareClassGroup,$shareClassGroupDN,$baseDN base group '()' gidNumber)
userGid=$(echo "$strgid" | cut -f2)


#################
#create the share
#################
echo "Creating s4 share $shareName"

shareClassDN=$(echo "$shareClassInfo" | grep 'Class share DN: ')
shareClassDN=${shareClassDN#Class share DN: }

# create the share #
samba-tool user create $shareName --userou=${shareClassDN} --random-password \
--use-username-as-cn \
--given-name="$shareShowName" \
--description="${shareOwner},${sharePermissions}" \
--home-directory="${shareServer}" \
--nis-domain=${shortDomain,,} \
--unix-home="${shareServer}" \
--uid-number="$userUid" \
--gid-number="$userGid" \
--login-shell="/bin/bash"


############
# next uid #
############
nextUid=$((userUid+1))

echo "dn: CN=$shortDomain,CN=ypservers,CN=ypServ30,CN=RpcServices,CN=System,$baseDN
changetype: modify
replace: msSFU30MaxUidNumber
msSFU30MaxUidNumber: $nextUid" > /tmp/$shareName

ldbmodify --url=$samDatabase -b $baseDN /tmp/$shareName
rm /tmp/$shareName


#########################
# associate the share   #
# with the show classes #
#########################
IFS=','
for shareShowClass in $shareShowClasses; do
   samba-tool group addmembers ${shareShowClass,,} $shareName
done
unset IFS

#######
# ok  #
#######
echo "Share created on AD !"
echo "##################################################"
echo "# !!! Launch s4makeshareddirs on the servers !!! #"
echo "# !!! to create the network shares.          !!! #"
echo "##################################################"
