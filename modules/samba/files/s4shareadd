#!/bin/bash

##############
#base var
##############
source /etc/samba/s4.conf

# usage #
function usage()
{
    echo "usage: $0 <share_name> <mod,acls> [share_class] [-o owner] [-c show_classes] [-n show_name] [-s server]"
    exit 0
}


###########
#parse args
###########
while [[ -n "$@" ]]; do

    # test option #
    OPTIND=1
    while getopts ":ho:c:n:s:" opt; do
	case $opt in
	    o)
		shareOwner=$OPTARG
		;;
	    c)
		shareShowClasses=$OPTARG
		;;
            n)
                shareShowName=$OPTARG
                ;;
            s)
                shareServer=$OPTARG
                ;;
	    h)
		usage
		;;
	    \?)
		echo "option -$OPTARG not recognized !"
		usage
		;;
	    :)
		echo "parameter of -$OPTARG not specified !"
		exit 0
		;;
	esac
    done

    # check classic args #
    if [ $OPTIND != 1 ]; then
       shift $((OPTIND-1))
    else
       remArgs="$remArgs $1"
       shift 1
    fi
done

# reset args #
if [ -n "$remArgs" ]; then
    set $remArgs
fi


#################
# analyse args
#################

# max three args #
if [ $# -gt 3 ] || [ $# -lt 2 ]; then
    usage
fi

#  check share's class #
if [ -z "$3" ]; then
   shareClassName=${baseUserDN#OU=}
   shareClassGroup=${baseUserGroup}
else
   shareClassName=$3
   shareClassGroup=${3,,}
fi

# parse share name  #
shareName="${shareClassGroup}.${1,,}"


# check if the share already exist #
if wbinfo --user-info $shareName > /dev/null 2>&1; then
   echo "The share already exist !"
   exit 0
fi


# search the class #
searchClass=$(s4ldbsearch -H $samDatabase -b $baseUserDN,$baseDN "(cn=$shareClassGroup)" | grep "dn: CN=$shareClassGroup,OU=$shareClassName")
if [ -z "$searchClass" ]; then
   echo "The class $shareClassName cannot be found !"
   exit 0
else
   shareClassDN=${searchClass#dn: CN=$shareClassGroup,}
   shareClassDN=${shareClassDN%$baseUserDN,$baseDN}
fi


# save permissions #
sharePermissions=$2

# check owner #
if [ -z "$shareOwner" ]; then
   shareOwner="root:${shareClassGroup}"
fi

shareOwnerUser=$(echo $shareOwner | cut -d: -f1)
shareOwnerGroup=$(echo $shareOwner | cut -d: -f2)
if [ -z "$shareOwnerUser" ] || [ -z "$shareOwnerGroup" ]; then
   echo "Cannot parse owner : $shareOwner"
   exit 0
fi

if [ "$shareOwnerUser" == "root" ]; then
   shareOwnerUID="0"
else
   struid=$(wbinfo --user-info="$shareOwnerUser")
   if [ $? -ne 0 ]; then
      echo "User $shareOwnerUser not found !"
      exit 0
   fi
   shareOwnerUID=$(echo $struid | cut -d ":" -f 3)
fi

strgid=$(wbinfo --group-info="$shareOwnerGroup")
if [ $? -ne 0 ]; then
   echo "Group $shareOwnerGroup not found !"
   exit 0
fi
shareOwnerGID=$(echo $struid | cut -d ":" -f 3)


# check show classes #
if [ -z "$shareShowClasses" ]; then
   shareShowClasses="$shareClassName"
fi

IFS=','
for shareShowClass in $shareShowClasses; do
   wbinfo --group-info ${shareShowClass,,} > /dev/null 2>&1
   if [ $? -ne 0 ]; then
      echo "Class $shareShowClass cannot be found !"
      exit 0
   fi
done
unset IFS

# check show name #
if [ -z "$shareShowName" ]; then
   shareShowName=${1,,}
fi


# check the server #
if [ -z "$shareServer" ]; then
   shareServer=$(hostname)
fi


###############################
# get user rfc2307 attributes #
###############################

# get the new uid #
userUid=$(s4ldbsearch -H $samDatabase -s base -b CN=$shortDomain,CN=ypservers,CN=ypServ30,CN=RpcServices,CN=System,$baseDN msSFU30MaxUidNumber | grep 'msSFU30MaxUidNumber:')
if [ -z "$userUid" ]; then
   userUid="$baseUid"
else
   userUid=$(echo $userUid | sed 's/^msSFU30MaxUidNumber: \(.*\)/\1/')
fi

# get the gid #
strgid=$(wbinfo --group-info="$baseShareGroup")
userGid=$(echo $strgid | cut -d ":" -f 3)


#################
#create the share
#################
echo "Creating s4 share $shareName"

# create the share #
samba-tool user create $shareName --userou=${shareClassDN}${baseShareDN} --random-password \
--use-username-as-cn \
--given-name="$shareShowName" \
--description="${shareOwner},${sharePermissions}" \
--home-directory="${shareServer}" \
--nis-domain=${shortDomain,,} \
--unix-home="${shareServer}" \
--uid-number="$userUid" \
--gid-number="$userGid" \
--login-shell="/bin/bash"


############
# next uid #
############
nextUid=$((userUid+1))

echo "dn: CN=$shortDomain,CN=ypservers,CN=ypServ30,CN=RpcServices,CN=System,$baseDN
changetype: modify
replace: msSFU30MaxUidNumber
msSFU30MaxUidNumber: $nextUid" > /tmp/$shareName

ldbmodify --url=$samDatabase -b $baseDN /tmp/$shareName
rm /tmp/$shareName


######################
# associate the share
# with the show classes
######################
IFS=','
for shareShowClass in $shareShowClasses; do
   samba-tool group addmembers ${shareShowClass,,} $shareName
done
unset IFS


############
# ok
############
echo "Share created on AD !"
echo "##################################################"
echo "# !!! Launch s4makeshareddirs on the servers !!! #"
echo "# !!! to create the network shares.          !!! #"
echo "##################################################"
