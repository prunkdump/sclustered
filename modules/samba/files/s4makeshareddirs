#! /usr/bin/perl -w -CD
use strict;
use warnings;
use utf8;
use File::Basename;
use File::Path qw(make_path rmtree);
use File::Find;
use File::Copy;
use Encode qw(decode);
use Getopt::Long;
use Sys::Hostname;
use Linux::ACL;
use Time::Piece;

# output as utf8 #
binmode(STDOUT,':encoding(UTF-8)');

#########
# usage #
#########
sub displayUsage {
   my $callerProgram = basename($0);
   print("usage: $callerProgram [-c baseClass] [-f] [-d] [-n] [-b backupDir]\n");
   print("   -c : update only dirs belonging to baseClass\n");
   print("   -f : force updating all shares and permissions, still interactive\n");
   print("   -d : delete unused data dirs, ask for confirmation if no backup dir is given\n");
   print("   -n : no interractive, delete data dirs only if backup dir is given\n");
   print("   -b : directory where backup before delete\n");
   exit(0);
}


######################
# check samba config #
######################
my $s4ConfFile = "/etc/samba/s4.conf";

# global vars #
my $baseDN;
my $baseUserDN;
my $baseShareDN;

my $baseUserGroup;
my $dfsPath;
my $unixHomePath;
my $homeShare;
my $unixProfilePath;
my $profileShare;
my $unixSharePath;
my $shareShare;


# open main configuration file #
open(my $sambaConf, "< $s4ConfFile") or die("Cannot read $s4ConfFile");

while( my $line = <$sambaConf> ) {

   chomp($line);
   
   # remove comments #
   if( $line =~ m/\#/ ) {
      if( $line =~ /(.*?)\#/ ) {
         $line = $1;
      }
   }

   # read DN #
   if ( $line =~ m/baseDN *= *\"(.*?)\"/ ) {
      $baseDN = $1;
   }
   elsif ( $line =~ m/baseUserDN *= *\"(.*?)\"/ ) {
      $baseUserDN = $1;
   }
   elsif ( $line =~ m/baseShareDN *= *\"(.*?)\"/ ) {
      $baseShareDN = $1;
   }

   # base user group #
   elsif ( $line =~ m/baseUserGroup *= *\"(.*?)\"/ ) {
      $baseUserGroup = $1;
   }

   # directory structure #
   elsif ( $line =~ m/dfsPath *= *\"(.*?)\"/ ) {
      $dfsPath = $1;
   }
   elsif( $line =~ m/unixHomePath *= *\"(.*?)\"/ ) {  
      $unixHomePath = $1;
   }
   elsif( $line =~ m/homeShare *= *\"(.*?)\"/ ) {
      $homeShare = $1;
   }
   elsif( $line =~ m/unixProfilePath *= *\"(.*?)\"/ ) {
      $unixProfilePath = $1;
   }
   elsif( $line =~ m/profileShare *= *\"(.*?)\"/ ) {
      $profileShare = $1;
   }
   elsif( $line =~ m/unixSharePath *= *\"(.*?)\"/ ) {
      $unixSharePath = $1;
   }
   elsif( $line =~ m/shareShare *= *\"(.*?)\"/ ) {
      $shareShare = $1;
   }
}
close($sambaConf);

# check global vars #
if( ! ( defined($baseDN) &&
        defined($baseUserDN) &&
        defined($baseShareDN) &&
        defined($baseUserGroup) &&
        defined($dfsPath) &&
        defined($unixHomePath) &&
        defined($homeShare) &&
        defined($unixProfilePath) &&
        defined($profileShare) &&
        defined($unixSharePath) &&
        defined($shareShare) ) ) {
   print("Cannot read global variables on $s4ConfFile\n");
   exit(1); 
}


#######################
# ldb caching library #
#######################

# store name => id #
my %usersUid;
my %groupsGid;

sub getUserUid {

   # get params, the user name #
   my $userName = $_[0];

   # check if we have the uid #
   if( defined($usersUid{$userName}) ) {
      return $usersUid{$userName};
   }

   # try to find the user, we use baseDN as the user may be a system user #
   open(my $ldbCall, "-|", "s4ldbsearch $baseDN sub user \"(cn=$userName)\" uidNumber");
   my $userInfoLine = <$ldbCall>;
   close($ldbCall);

   # check if user found #
   if( $? != 0 ) {
      print("User $userName UID not found ! Check AD database for errors !");
      exit(1);
   } else {

      # save the result #
      chomp($userInfoLine);
      my $userUid;
      $userUid  = (split(/\t/, $userInfoLine, -1))[1];
      $usersUid{$userName} = $userUid;
      return $userUid;
   }
}


sub getGroupGid {

   # get params, the group name #
   my $groupName = $_[0];

   # check if we have the gid #
   if( defined($groupsGid{$groupName}) ) {
      return $groupsGid{$groupName};
   }

   # try to find the group, we use baseDN as this may be a system group #
   open(my $ldbCall, "-|", "s4ldbsearch $baseDN sub group \"(cn=$groupName)\" gidNumber");
   my $groupInfoLine = <$ldbCall>;
   close($ldbCall);

   # check if group found #
   if( $? != 0 ) {
      print("Group $groupName GID not found ! Check AD database for errors !");
      exit(1);
   } else {
      # save the result #
      chomp($groupInfoLine);
      my $groupGid = (split(/\t/, $groupInfoLine, -1))[1];
      $groupsGid{$groupName} = $groupGid;
      return $groupGid;
   }
}


sub setFileAcl {

   # get params, the file, the mod, the acls #
   my ($filePath, $fileMod, $fileAclString) = @_;

   # hash to fill to set ACLs #
   my %fileAcls;
   my %defaultFileAcls;

   # check if the file exist #
   if( ! -e "$filePath" ) {
      print("Attempted to change the ACLs of a non existing file !\n");
      exit(1);
   }

   ###############
   # analyse mod #
   ###############

   # check mod #
   if( ! ($fileMod =~ m/^[0-7]{3,4}$/) ) {
      print("Bad mod used : $fileMod !\n");
      exit(1);
   }

   # remove sticky, not used in acls #
   if( length($fileMod) == 4 ) {
      $fileMod = substr($fileMod, 1);
   }

   # init mask #
   $fileAcls{'lockedMask'} = '';
   $fileAcls{'mask'}{'r'} = 0;
   $fileAcls{'mask'}{'w'} = 0;
   $fileAcls{'mask'}{'x'} = 0;

   $defaultFileAcls{'lockedMask'} = '';
   $defaultFileAcls{'mask'}{'r'} = 0;
   $defaultFileAcls{'mask'}{'w'} = 0;
   $defaultFileAcls{'mask'}{'x'} = 0;
   
   # check mod user #
   my @modTargets = ('uperm', 'gperm', 'other');
   foreach my $targetIdx (0..$#modTargets) {
 
      my $modTarget = $modTargets[$targetIdx];

      # read mod number #
      my $mod = int(substr($fileMod, $targetIdx, 1));
      
      # r permission #
      if( $mod & 4 ) {
         $fileAcls{$modTarget}{'r'} = 1;
         $fileAcls{'mask'}{'r'} = 1;
      } else {
         $fileAcls{$modTarget}{'r'} = 0;
      }

      # w permission #
      if( $mod & 2 ) {
         $fileAcls{$modTarget}{'w'} = 1;
         $fileAcls{'mask'}{'w'} = 1;
      } else {
         $fileAcls{$modTarget}{'w'} = 0;
      }

      # x permission #
      if( $mod & 1 ) {
         $fileAcls{$modTarget}{'x'} = 1;
         $fileAcls{'mask'}{'x'} = 1;
      } else {
         $fileAcls{$modTarget}{'x'} = 0;
      }
   }

   ##############
   # check acls #
   ##############

   while( length($fileAclString) ) {

      # check default #
      my $alcRef;
      if( $fileAclString =~ m/^d:/ ) {
         $alcRef = \%defaultFileAcls;
         $fileAclString = substr($fileAclString, 2);
      } else {
         $alcRef = \%fileAcls
      }

      # read acl #
      if( $fileAclString =~ m/^(u|user|g|group|m|mask|o|other):(.*?):?([rwx-]{0,3})(,|$)/ ) {

         my $aclType = $1;
         my $aclTarget = $2;
         my $aclRights = $3;

         # get complete ACL string #
         my $currentAlcString;
         if( $fileAclString =~ m/^(.*?)(,|$)/ ) {
            $currentAlcString = "$1$2";
         }

         my $aclID;

         # check type #
         if( $aclType eq "u" ) {
            $aclType = "user";
         }
         elsif( $aclType eq "g" ) {
            $aclType = "group";
         }
         elsif( $aclType eq "m" ) {
            $aclType = "mask";
         }
         elsif( $aclType eq "o" ) {
            $aclType = "other";
         }

         # particular cases, u::rwx or g::rwx #
         if( $aclTarget =~ m/^ *$/ ) {
            if( $aclType eq "user" ) {
               $aclType = "uperm";
            }
            elsif( $aclType eq "group" ) {
               $aclType = "gperm";
            }
         }
        
         # get id if needed #
         if( $aclType eq "user" ) {
            $aclID = getUserUid($aclTarget);
         }
         elsif( $aclType eq "group" ) {
            $aclID = getGroupGid($aclTarget);
         }

         # save #
         if( $aclType eq "user" || $aclType eq "group" ) {

            foreach my $permType ('r', 'w', 'x') {
               if( $aclRights =~ m/$permType/ ) {
                  $alcRef->{$aclType}{$aclID}{$permType} = 1;
                  if ( ! $alcRef->{'lockedMask'} ) {
                     $alcRef->{'mask'}{$permType} = 1;
                  }
               } else {
                  $alcRef->{$aclType}{$aclID}{$permType} = 0;
               }
            }
         } 

         else {

            # if mask is set lock it #
            if( $aclType eq "mask" ) {
               $alcRef->{'lockedMask'} = 'true';
            }

            # set #
            foreach my $permType ('r', 'w', 'x') {
               if( $aclRights =~ m/$permType/ ) {
                  $alcRef->{$aclType}{$permType} = 1;
                  if ( ! $alcRef->{'lockedMask'} ) {
                     $alcRef->{'mask'}{$permType} = 1;
                  }
               } else {
                  $alcRef->{$aclType}{$permType} = 0;
               }
            }
         }

         # next acl #
         $fileAclString = substr($fileAclString, length($currentAlcString));

      } else {
         print("Bad ACL string : $fileAclString\n");
         exit(1); 
      }
   }

   # copy base acls to default if needed #
   # (the hash always contain mask and lockedMask) #
   if( keys(%defaultFileAcls) > 2 ) {

      # check all base perms #
      foreach my $aclBasePerm ('uperm', 'gperm', 'other') {

         # if the base perm is not defined, copy it #
         if( ! defined( $defaultFileAcls{$aclBasePerm} )) {

            # copy perm and update mask #
            foreach my $permType ('r', 'w', 'x') {
               $defaultFileAcls{$aclBasePerm}{$permType} = $fileAcls{$aclBasePerm}{$permType};
               if( $defaultFileAcls{$aclBasePerm}{$permType} == 1 && ! $defaultFileAcls{'lockedMask'} ) {
                  $defaultFileAcls{'mask'}{$permType} = 1;
               }
            }
         }
      }
   }

   # remove private keys #
   delete($fileAcls{'lockedMask'});

   # remove unused default mask #
   if( keys(%defaultFileAcls) == 2 && ! $defaultFileAcls{'lockedMask'} ) {
      delete($defaultFileAcls{'mask'});
   }
   delete($defaultFileAcls{'lockedMask'});

   # ok, acl read #
   # now apply #
   if( keys(%defaultFileAcls) ) {
      setfacl($filePath, \%fileAcls, \%defaultFileAcls);
   } else {
      setfacl($filePath, \%fileAcls);
   }
}


my %groupsDisplayName;

sub getGroupDisplayName {

   # one arg, the group DN #
   my $groupDN = $_[0];

   # maybe already know it #
   if( defined($groupsDisplayName{$groupDN}) ) {
      return $groupsDisplayName{$groupDN};
   }

   # if not, search #
   open(my $searchGroupCall , "-|", "s4ldbsearch $groupDN base group '()' displayName");
   my $shareClassGroupInfoLine = <$searchGroupCall>;
   close($searchGroupCall);

   if( $? != 0 ) {
      print("Cannot find group $groupDN displayName !\n");
      exit(1);
   }

   # save #
   chomp($shareClassGroupInfoLine);
   my $groupDisplayName = (split(/\t/, $shareClassGroupInfoLine, -1))[1];
   $groupsDisplayName{$groupDN} = $groupDisplayName;
   return $groupDisplayName;
}


##############
# parse args #
##############

# the options #
my $optBaseClass;
my $optForce;
my $optDelete;
my $optNoInteractive;
my $optBackupDir;

Getopt::Long::Configure("bundling","no_ignore_case");
GetOptions("c|base-class=s" => \$optBaseClass,
           "f|force" => \$optForce,
           "d|delete" => \$optDelete,
           "n|no-interactive" => \$optNoInteractive,
           "b|backup-dir=s" => \$optBackupDir) 
          or displayUsage();

# check args #
if( @ARGV != 0 ){
   displayUsage();
}


###############
# ask library #
###############

sub askYesOrNo {

   # get params, the questions #
   my $question = $_[0];

   # if no interactive return yes #
   if( defined($optNoInteractive) ) {
      return 'yes';
   }

   # ask #
   while( 1 ) {
      print("$question ([y]es or [N]o): ");
      my $rep = <>;
      if( $rep =~ m/^y(es|)$/ ) {
         return 'yes';
      }
      elsif( $rep =~ m/^no?$/ ) {
         return 'no';
      }
   }
}


##############
# check args #
##############

# get the base class #
my $baseClassName;
my $rootClassName = substr($baseUserDN, length('OU='));
my $baseClassIsRoot;

if ( ! defined($optBaseClass) ) {
   $baseClassName = $rootClassName;
} else {
   $baseClassName = $optBaseClass;
}

if ( $baseClassName eq $rootClassName ) {
   $baseClassIsRoot = 'true';
}

# check the class exist and get info #
my $baseClassGroup;
my $baseClassUserDN;
my $baseClassShareDN;

open(my $classCheckCall, "-|", "s4classcheck $baseClassName");
while( my $classInfoLine = <$classCheckCall> ) {

   chomp($classInfoLine);

   if( $classInfoLine =~ m/^Class group: (.*)$/ ) {
      $baseClassGroup = $1;
   }
   elsif( $classInfoLine =~ m/^Class DN: (.*)$/ ) {
      $baseClassUserDN = $1;
   }
   elsif( $classInfoLine =~ m/^Class share DN: (.*)$/ ) {
      $baseClassShareDN = $1;
   }
}

close($classCheckCall);
if( $? != 0 ) {
   print("Cannot find base class $baseClassName !\n");
   exit(1);
}

# check the delete option #
# can't be combined with a no root base class as we need to touch all files #
# to check unused #
if ( ! $baseClassIsRoot && defined($optDelete) ) {
   print("The -d options can only be used on root class $rootClassName.\n");
   exit(1);
}

# warning if delete without backup directory #
# if not interractive without backup, delet will be disabled #
if( ! defined($optNoInteractive) &&  defined($optDelete) && ! defined($optBackupDir) ) {
   print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
   print("WARNING ! You have enabled deletion of unused data dirs\n");
   print("without specifying backup dir with the -b option !\n");
   print("So confirmation will be asked before permanently delete\n");
   print("each data dir.\n");
   print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
   if ( askYesOrNo("Are you sure you want continue like this ?") eq "no" ) {
      exit(0);
   }
}     

# check the backup dir #
my $backupTimeString = localtime->strftime('%Y%m%d%H%M%S');
if( defined($optBackupDir) ) {

   # remove trailing slash #
   $optBackupDir =~ s|/$||;

   # check if exist #
   if( ! -e $optBackupDir) {
      print("Cannot find backup directory $optBackupDir !\n");
      exit(0);
   }

   # check if directory #
   if( ! -d $optBackupDir) {
      print("Backup path $optBackupDir is not a directory !\n");
      exit(0);
   }

   # check if writable #
   if( ! -w $optBackupDir) {
      print("Backup path $optBackupDir is not writable !\n");
      exit(0);
   }
}


###################
# get system vars #
###################

# get hostname #
my $serverHostname = hostname;

# get time #
my $baseTimestamp = time();

# like mkdir -p but update all directories timestamps #
sub createPathWithUpdatedTimestamp {

   # get path #
   my $completePath = $_[0];

   # convert to absolute if needed #
   if( ! ( $completePath =~ m|^/| ) ) { 
      $completePath = Cwd::abs_path($completePath);
   }

   # traverse path #
   my $currentPath = "";
   foreach my $currentDir (File::Spec->splitdir($completePath)) {
      $currentPath .= "/$currentDir";

      if( "$currentPath" ne "/" ) {
         if( -e "$currentPath" ) {
            utime(undef, undef,$currentPath);
         } else {
            mkdir($currentPath);
         }
      }
   } 
}


# To check unused dirs later #
# -> create of update dir timestamp #
# -> return if dir rights must be set #
sub touchDir {

   my $filePath = $_[0];
   my $rightMustBeUpdated = 1;
   
   if ( -e $filePath &&  ! defined($optForce) ) {
      $rightMustBeUpdated = 0;
   }
   
   createPathWithUpdatedTimestamp($filePath);
   return $rightMustBeUpdated;
}


####################
# create user dirs #
####################

# save remote servers #
my %remoteHomeServers;

# home directories that need to be deleted later #
my @oldHomeDirs;

# get all users #
open(my $ldbCall, "-|", "s4ldbsearch $baseClassUserDN,$baseDN sub user '()' cn unixHomeDirectory uidNumber gidNumber");

while( my $userInfoLine = <$ldbCall> ) {

   chomp($userInfoLine);

   # get user info #
   my ($userDn, $userName, $userHomeDirectory, $userUid, $userGid) = split(/\t/, $userInfoLine, -1);

   # get user class group #
   my $userClassGroup;
   if( $userDn =~ m/^CN=$userName,OU=(.*?),/ ) {
      $userClassGroup = lc($1);
   } else {
      print("Cannot determine user $userName class group !\n");
      exit(1);
   }

   # get user server #
   my $userServer;
   if( $userHomeDirectory =~ m/\/dnfs\/$homeShare\/(.*)\/$userName$/ ) {
      $userServer = $1;
   } else {
      print("Cannot determine user $userName home server !\n");
      exit(1);
   }

   ####################
   # create user dirs #
   ####################

   # make class share directories #
   touchDir("/srv/nfs4/$shareShare/$userClassGroup");
   touchDir("$dfsPath/$userClassGroup");

   # if user on current server create user directory #
   # and touch profile directories #
   if ( $userServer eq $serverHostname ) {

      #############################
      # check some specials cases #
      #############################
      if ( -e "$unixHomePath/$userName" ) {

         # check if the uid is correct #
         my ($currentDirUid, $currentDirGid) = (lstat("$unixHomePath/$userName"))[4,5];

         if ( $currentDirUid != $userUid) {

            # bad uid ! this must be an old user dir, backup, delete or restore later #
            push @oldHomeDirs, "$unixHomePath/$userName";
            chown($userUid, $userGid, "$unixHomePath/$userName");
            system("setfacl -bk $unixHomePath/$userName");
            chmod(0700, "$unixHomePath/$userName");

         } else {

            # check if the gid is correct #
            if ( $currentDirGid != $userGid ) {

                # bad gid ! may the user's class have changed #
                print("Seems the ${userName}'s class have changed, restoring rights ...\n");
                chown($userUid, $userGid, "$unixHomePath/$userName");
                system("setfacl -bk $unixHomePath/$userName");
                chmod(0700, "$unixHomePath/$userName");
            }
         }
      }      

      # touch the directory, and update rights if needed #
      if( touchDir("$unixHomePath/$userName") ) {

         chown($userUid, $userGid, "$unixHomePath/$userName");
         system("setfacl -bk $unixHomePath/$userName");
         chmod(0700, "$unixHomePath/$userName");
      }

      # touch profile directories if exist #
      foreach my $profileDir (<$unixProfilePath/${userName}*>) {
         if ( $profileDir =~ m{^$unixProfilePath/$userName(\.V\d|)$} ) {
            utime(undef, undef, "$profileDir");
         }
      }
   }

   # if the user is not on this server, add to the remote servers list #
   else {
      $remoteHomeServers{$userServer} = 1;
   }
}

close($ldbCall);


##################
# get nfs params #
##################

sub getSystemdUnitName {

   my $path = $_[0];

   # read unit name #
   open(my $systemdEscape, "-|", "systemd-escape -p --suffix=mount '$path'") or die("Cannot launch systemd-escape !\n");
   my $unitName = <$systemdEscape>;
   chomp($unitName);
   close($systemdEscape);

   return $unitName;
} 


# template must not be deleted #
utime(undef, undef, "/etc/exports.d/export.template");

# get template #
open(my $exportTemplate, "<", "/etc/exports.d/export.template") or die("Cannot find nfs export template !\n");
my $shareNfsTemplate = <$exportTemplate>;
chomp($shareNfsTemplate);
close($exportTemplate);

# extract params #
my $shareNFSParams = (split(" ", $shareNfsTemplate))[1];


###################################################################
# create nfs home server redirection                              #
# (not needed for dfs as the server is written in the home share) # 
###################################################################
foreach my $remoteHomeServer (keys %remoteHomeServers) {

   my $serverHomeShareDir="/srv/nfs4/$homeShare/$remoteHomeServer";

   # create/update server redirection directory #
   if( touchDir($serverHomeShareDir) ) {
      chown(0, getGroupGid($baseUserGroup), $serverHomeShareDir);
      chmod(0755, $serverHomeShareDir);
   }

   # create systemd unit to bind the directory to itself, needed for nfs referrals #
   my $systemdUnitName = getSystemdUnitName("/srv/nfs4/$homeShare/$remoteHomeServer");

   # create only if not exist #
   if( defined($optForce) || ! -e "/lib/systemd/system/$systemdUnitName" ) {

      open(my $systemdUnit, ">", "/lib/systemd/system/$systemdUnitName") or die "Can't open $systemdUnitName !";

      print $systemdUnit 
"[Unit]

[Mount]
What=$serverHomeShareDir
Where=$serverHomeShareDir
Type=none
Options=bind

[Install]
WantedBy=multi-user.target
";

      close($systemdUnit);

      system("systemctl enable '$systemdUnitName'");
      system("systemctl start '$systemdUnitName'");
   } else {

      # just update timestamp #
      utime(undef, undef, "/lib/systemd/system/$systemdUnitName");
   }

   ###########################
   # create nfs4 redirection #
   ###########################

   # add new referral params #
   my $shareNFSParamsWithReferral = substr($shareNFSParams, 0, -1) . ",refer=/$homeShare/$remoteHomeServer\@$remoteHomeServer)";
   
   # create new share #
   if( defined($optForce) || ! -e "/etc/exports.d/home-redirection-$remoteHomeServer.exports" ) {
      open(my $nfsShareExport, ">", "/etc/exports.d/home-redirection-$remoteHomeServer.exports");
      print $nfsShareExport "$serverHomeShareDir $shareNFSParamsWithReferral\n";
      close($nfsShareExport);
   } else {
      utime(undef, undef, "/etc/exports.d/home-redirection-$remoteHomeServer.exports");
   }
}


######################
# create shares dirs #
######################

# get all shares now #
# to avoid recursive ldb calls #
my @sharesInfo;
open($ldbCall, "-|", "s4ldbsearch $baseClassShareDN,$baseDN sub user '()' cn givenName description unixHomeDirectory memberOf");

while( my $shareInfoLine = <$ldbCall> ) {

   chomp($shareInfoLine);

   my @shareInfo = split(/\t/, $shareInfoLine, -1);
   push @sharesInfo, \@shareInfo;
}

# create share #
foreach my $shareInfo (@sharesInfo) {

   # get share info #
   # givenName -> show name
   # description -> rights : owner,mod,acls
   # unixHomeDirectory -> server 
   # memberOf -> the classes that see the share  
   my ($shareDN, $shareName, $shareShowName, $shareRights, $shareServer, $shareShowClassesList) = (@$shareInfo);

   # get share class group and DN #
   my $shareClassName;
   my $shareClassGroup;
   my $shareClassGroupDN;

   if( $shareDN =~ m/CN=$shareName,OU=(.*?),(.*)$baseShareDN,$baseDN$/ ) {
      $shareClassName = $1;
      $shareClassGroup = lc($shareClassName);
      $shareClassGroupDN = "CN=$shareClassGroup,OU=$shareClassName,$2$baseUserDN,$baseDN";
   } else {
      print("Cannot determine the share $shareName class group !\n");
      exit(1);
   }

   # get share class display name #
   my $shareClassDisplayName = getGroupDisplayName($shareClassGroupDN);

   # get share show classes #
   my @shareShowClasses = split(/\|/, $shareShowClassesList);


   ##############
   # get rights #
   ##############

   my ($shareOwner,$shareMod,$shareAcls) = split(/,/, $shareRights, 3);
   my ($shareOwnerUser, $shareOwnerGroup) = split(/:/, $shareOwner);

   my $shareOwnerUID;
   if( $shareOwnerUser eq 'root' ) {
      $shareOwnerUID = 0;
   } else {
      $shareOwnerUID = getUserUid($shareOwnerUser);
      if( $shareOwnerUID < 0 ) {
         print("Cannot find user $shareOwnerUser UID !\n");
         exit(1);
      } 
   }

   my $shareOwnerGID;
   if( $shareOwnerGroup eq 'root' ) {
      $shareOwnerGID = 0;
   } else {
      $shareOwnerGID = getGroupGid($shareOwnerGroup);
      if( $shareOwnerGID < 0 ) {
         print("Cannot find group $shareOwnerGroup GID !\n");
         exit(1); 
      }
   }


   ############################
   # create share directories #
   ############################
   if( $shareServer eq $serverHostname ) {

      # check share directory #
      if( touchDir("$unixSharePath/$shareName") ) {

         chown($shareOwnerUID, $shareOwnerGID, "$unixSharePath/$shareName");
         chmod(oct($shareMod), "$unixSharePath/$shareName");
         system("setfacl -bk $unixSharePath/$shareName");
         if( length($shareAcls) ) {
            setFileAcl("$unixSharePath/$shareName", $shareMod, $shareAcls);
         }
      }
   }


   ########################
   # create nfs/dfs links #
   ########################
   my $shareExport;
   my $shareExportUpdate = '';
   if( defined($optForce) || ! -e "/etc/exports.d/$shareName.exports" ) {
      open($shareExport, ">", "/etc/exports.d/$shareName.exports");
      $shareExportUpdate = 'true';
   } else {
      utime(undef, undef, "/etc/exports.d/$shareName.exports");
   }

   my $nfsRoot = "/srv/nfs4/$shareShare";
   my $sambaDFSRoot = "$dfsPath";

   foreach my $showClassDN (@shareShowClasses) {

      # get class name and group #
      my $showClassName;
      my $showClassGroup;

      if( $showClassDN =~ m/CN=(.*?),/ ) {
         $showClassName = $1;
      } else {
         print("Cannot get show class name from DN : $showClassDN !\n");
         exit(1);
      }
      $showClassGroup = lc($showClassName);

      # make dirs #
      # the nfs one and samba dfs one # 
      my $shareShowDir = "$nfsRoot/$showClassGroup/$shareClassDisplayName/$shareShowName";
      my $sambaShareShowDir = "$sambaDFSRoot/$showClassGroup/$shareClassDisplayName";

      touchDir($shareShowDir);
      touchDir($sambaShareShowDir);

      # nfs share #
      my $shareNfs = "$shareShowDir $shareNFSParams";
      my $systemdUnitName = getSystemdUnitName($shareShowDir);

      # add referral if needed #
      my $mountTarget;
      if( $shareServer eq $serverHostname ) {
         $mountTarget = "$unixSharePath/$shareName";
      } else {
         # bind mount to itself #
         $mountTarget = $shareShowDir;
         $shareNfs = substr($shareNfs, 0, -1) . ",refer=/$shareShare/$showClassGroup/$shareClassDisplayName/$shareShowName\@$shareServer)";
      }

      # write unit file #
      if( defined($optForce) || ! -e "/lib/systemd/system/$systemdUnitName" ) {

         open(my $unitFile, ">", "/lib/systemd/system/$systemdUnitName");
         print $unitFile
"[Unit]

[Mount]
What=$mountTarget
Where=$shareShowDir
Type=none
Options=bind

[Install]
WantedBy=multi-user.target
";
         close($unitFile);

         system("systemctl enable '$systemdUnitName'");
         system("systemctl start '$systemdUnitName'");
      } else {
         utime(undef, undef, "/lib/systemd/system/$systemdUnitName");
      }
   
      # add show export #
      if ( $shareExportUpdate ) {
         print $shareExport "$shareNfs\n";
      }

      # dfs share #
      # the only way to update a link is to create it again #
      if( -l "$sambaShareShowDir/$shareShowName" ) {
         unlink("$sambaShareShowDir/$shareShowName");
      }
      symlink("msdfs:$shareServer\\$shareShare\\$shareName", "$sambaShareShowDir/$shareShowName");
   }

   if( $shareExportUpdate ) {
      close($shareExport);
   }
  
}
close($ldbCall);

#############################################################

#########
# clean #
#########

#################
# clean methods #
#################
my $cleanMaxDepth = 0;
my $cleanFilesRef;


sub cleanTree {

   # get params, the tree path and the depth #
   my ($cleanPath, $cleanDepth) = (@_);

   # init global vars #
   $cleanMaxDepth = $cleanDepth;
   my @cleanFiles = ();
   $cleanFilesRef = \@cleanFiles; 

   # find file to clean #
   find( { wanted => \&checkFileTimestamp, preprocess => \&cleanPreprocess, bydepth => 1, follow => 0 }, $cleanPath);

   # delete them #
   foreach my $filePath (@cleanFiles) {
      print("Deleting $filePath\n");
      if( -d "$filePath" ) {
         rmdir($filePath);
      } else {
         unlink($filePath);
      }
   }
}

# used to limit depth #
sub cleanPreprocess {

   my $filePath = decode("UTF-8", $File::Find::dir);

   # scalar(File::Spec->splitdir) return depth + 1 but preprocess determiner if the next depth (depth + 1) must be proceded #
   if( scalar(File::Spec->splitdir($File::Find::dir)) <= $cleanMaxDepth ) {
      return @_
   }

   return;
}

# check file that need to be deleted #
sub checkFileTimestamp {
  
   my $filePath = decode("UTF-8", $File::Find::name);

   if( (lstat($filePath))[9] < $baseTimestamp ) {
      push @$cleanFilesRef, $filePath;
   }
}


# clean only if executed on root class #
# as timestamps are used to determine  #
# unused files/dirs                    #
if( $baseClassIsRoot ) {

   #######################
   # clean systemd units #
   #######################

   # check all systemd unit files relative to nfs #
   foreach my $systemdUnitFile (</lib/systemd/system/srv-nfs4-*>) {

      # check timestamp #
      if ( (lstat($systemdUnitFile))[9] < $baseTimestamp ) {

         # delete unit #
         print("Deleting systemd unit $systemdUnitFile\n");

         my $systemdUnitName = basename($systemdUnitFile);
         system("systemctl stop '$systemdUnitName'");
         system("systemctl disable '$systemdUnitName'");
         unlink($systemdUnitFile); 
      }
   }


   ##########################
   # clean nfs export files #
   ##########################
   foreach my $nfsExportFile (</etc/exports.d/*>) {

      # check timestamp #
      if ( (lstat($nfsExportFile))[9] < $baseTimestamp ) {

         # delete export #
         print("Deleting nfs export $nfsExportFile\n");
         unlink($nfsExportFile);
      }
   }


   #################################
   # reload nfs                    #
   # as we will delete directories #
   #################################
   system("/usr/sbin/exportfs -ra");


   ######################################
   # clean nfs home server redirections #
   ######################################
   foreach my $nfsHomeServerRedirectionDir (</srv/nfs4/$homeShare/*>) {

      # check if remote #
      my $remoteServerName = basename($nfsHomeServerRedirectionDir);
      if( $serverHostname ne $remoteServerName ) {

         # check timestamp #
         if ( (lstat($nfsHomeServerRedirectionDir))[9] < $baseTimestamp ) {

            # delete dir #
            print("Deleting home redirection dir $nfsHomeServerRedirectionDir\n");
            rmdir($nfsHomeServerRedirectionDir);
         }
      }
   }


   ##################
   # clean nfs tree #
   ##################

   # the current depth
   my $cleanDepth = scalar(File::Spec->splitdir("/srv/nfs4/$shareShare")) - 1;

   # add 3
   $cleanDepth += 3;

   # clean
   cleanTree("/srv/nfs4/$shareShare", $cleanDepth);

   ##################
   # clean dfs tree #
   ##################

   # the current depth
   $cleanDepth = scalar(File::Spec->splitdir("$dfsPath")) - 1;

   # add 3
   $cleanDepth += 3;

   # clean
   cleanTree("$dfsPath", $cleanDepth);

} else {

   #################################
   # no clean, just reload nfs     #
   #################################
   system("/usr/sbin/exportfs -ra");
}


####################################################

sub isDirEmpty {

   my $dirPath = $_[0];
   my $dirIsEmpty = '1';

   opendir(my $dirHdl, $dirPath) or die("Cannot open directory $dirPath !\n");
   while( readdir($dirHdl) ) {
      if( $_ ne '.' && $_ ne '..' ) {
         $dirIsEmpty = 0;
         last;
      }
   }
   closedir($dirHdl);

   return $dirIsEmpty;
} 

sub backupAndDeleteDir {

   my ($deletePath, $deleteType) = (@_);

   # backup if needed #
   my $backupSuccess = '';
   if( defined($optBackupDir) ) {
      my $backupCurrentDir = dirname($deletePath);
      my $backupDirName = basename($deletePath);

      if( ! isDirEmpty($deletePath) ) {
         print("Backing up $deletePath ...\n");
         system("tar -C '$backupCurrentDir' --acls --xattrs -czpf '$optBackupDir/$backupTimeString.$backupDirName.$deleteType.tar.gz' '$backupDirName'");

         if( $? == 0 ) {
            $backupSuccess = 'true';
         }
      } else {
         # no need to backup #
         print("Directory $deletePath is empty, no need to backup.\n");
         $backupSuccess = 'true';
      }
   }

   # delete, check success #
   if( ! defined($optBackupDir) || $backupSuccess ) {
      print("Deleting $deletePath ...\n");
      rmtree($deletePath, { safe => 1 });
   } else {
      if( defined($optBackupDir) && ! $backupSuccess ) {
         print("Failed to backup $deletePath, so it will no be deleted !\n");
      }
   }
}


#########################
# clean data dirs       #
# date may need backups #
#########################

# old users dirs #
# with new user with same name #
foreach my $oldHomeDir (@oldHomeDirs) {

   # get saved uid and gid of the new user #
   my $changedUserName = basename($oldHomeDir);
   my ($changedUserUid, $changedUserGid) = (lstat($oldHomeDir))[4,5];
   print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
   print("$oldHomeDir seems to be an old home dir.\n");
   print("But a new user with the same name now exist.\n");

   # if backup dir is given, backup the user #
   if( defined($optBackupDir) ) {

      # backup #
      backupAndDeleteDir($oldHomeDir, 'home');
   }

   # else move the directory #
   else {

      # search new name #
      my $baseMoveDirName = "$oldHomeDir";
      my $currentMoveDirName = "$oldHomeDir.old";
      my $moveDirNameNumber = 1;

      while( -e "$currentMoveDirName" ) {
         $moveDirNameNumber++;
         $currentMoveDirName = "$baseMoveDirName.old${moveDirNameNumber}";
      }

      # move #
      print("Moving the directory to $currentMoveDirName\n");
      print("as it can be deleted or backed up later on next run.\n");
      move("$oldHomeDir", "$currentMoveDirName");
   }

   # now create the new user directory #
   touchDir("$unixHomePath/$changedUserName");
   chown($changedUserUid, $changedUserGid, "$unixHomePath/$changedUserName");
   chmod(0700, "$unixHomePath/$changedUserName");
   
   print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
}


# the others dirs #
if( defined($optDelete) ) {

   # clean home, share, and profile dirs #
   my %cleanPaths = ('home' => "$unixHomePath", 'share' => "$unixSharePath", 'profile' => "$unixProfilePath");

   foreach my $pathType (keys %cleanPaths) {

      my $cleanPath = $cleanPaths{$pathType};

      # get old dirs #
      my @badDirs;
   
      # check all dirs #
      foreach my $dirPath (<$cleanPath/*>) {

         # check if the directory is older #
         if ( (lstat($dirPath))[9] < $baseTimestamp ) {
            push @badDirs, $dirPath;
         }
      }

      if( @badDirs ) {

         print("\n");
         print("###############################################\n");
         print(" The following $pathType directories seems not used \n");
         print("###############################################\n");

         foreach my $badDir (@badDirs) {
            print("$badDir\n");
         }

         # check action #
         my $cleanAction;
         if( defined($optBackupDir) ) {
            $cleanAction = 'backup and delete';
         } else {
            $cleanAction = 'permanently delete';
         }

         # check if we need to delete #
         # -> if no interactive with backup dir
         # -> or if interactive with a yes reply
         if( (defined($optNoInteractive) && defined($optBackupDir)) ||
             ( ! defined($optNoInteractive) &&
             askYesOrNo("Would you like to $cleanAction them ?") eq "yes" ) ) {

            foreach my $badDir (@badDirs) {

               # backup and delete #
               backupAndDeleteDir($badDir, $pathType);
            }
         }
      }
   }
}
